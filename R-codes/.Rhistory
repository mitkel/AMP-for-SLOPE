a <- c(4,3,2,1)
a
b <- c(10,-2,5,3)
a-b
library(gsubfn) # for multivalued functions handling
MapToDelta <- function( v ){
sgn <- ((v>0) - 1/2)*2
foo <- sgn*v
bar <- sort(foo, decreasing = TRUE, index.return = TRUE)
return( list("w" = bar$x, "sgn" = sgn, "P" = bar$ix) )
}
RetrV <- function( w, sgn, P ){
# retrieves the inverse permutation to P, i.e.
# finds [ j: P[j]=i ]_i
foo <- as.numeric(
lapply(c(1:length(w)), function(x) (which(P == x)))
)
return( w[foo]*sgn )
}
DeltaCheck <- function( v ){
# return( isTRUE(all.equal(v, MapToDelta(v)$w )) )
return( max(diff(v)) <= 0 && min(v) >= 0  )
}
a-b
max((a-b),0)
apply(a-b, function(x) max(x,0))
lapply(a-b, function(x) max(x,0))
as.numeric(lapply(a-b, function(x) max(x,0)))
as.numeric(lapply(b, function(x) max(x,0)))
FastProxSL1 <- function( y, theta){
if( !DeltaCheck(theta) ) warning("Arg. theta is not in Delta_p!")
while( !DeltaCheck((y-theta)[y-theta>=0]) ){
print("A")
}
return( as.numeric( lapply( y-theta, function(x) max(x,0) ) ) )
}
a
b
a-b
which(a-v <= 0)
which(a-b <= 0)
which(a-b <= 0)[1]
which(a-b <= 0)[2]
a
b
diff(a-b)
a-b
diff(a-b)
which(diff(a-b)>0)
which(diff(a-b)>0)[1]
a[2:3]
a
a[1:3]
a-b
(a-b)[2:-]
(a-b)[2:]
(a-b)[2]
(a-b)[2:4]
(a-b)[2:inf]
(a-b)[-(1:2)]
a-b
a<- seq(10)
a
b <- seq(10, by=-1 start=4)
b <- seq(10, by=-1 from=4)
b <- seq(10, from=4, by=-1)
b <- seq(10, from=4, to=-6)
b <- seq(from=4, by=2, length.out = 10)
b
b <- seq(from=8, by=-2, length.out = 10)
b
a-b
a
a <- c(a,11)
b
b <- c(b,11)
b
a
a-b
(which(diff(a-b))>0)[1]
(which(diff(a-b)>0))[1]
a
a <- a*a
a
b
a+b
a <- seq(10)
a <- a*a - 4a
a <- a*a - 4*a
a
which(diff(a) > 0 )
which(diff(a) < 0 )
a
a <- seq(10)
a <- a*a - 8a
a <- a*a - 8*a
a
a[1:2] <- 4
a
a[3:6] <- 8
a[7:9] <-  5
a[10] <-  10
a
diff(a)
which(diff(a) > 0)[1]
i <- which(diff(a) > 0)[1]
i
which(diff(a)[-1:i] < 0)[1]
which(diff(a[-1:i]) < 0)[1]
which(diff(a[-(1:i)]) < 0)[1]
a[-(1:i)]
a
a[6]
j <- i+ which(diff(a[-(1:i)]) < 0)[1]
j
a[i:j]
mean(a[i:j])
a[i:j] <- mean(a[i:j])
FastProxSL1 <- function( y, theta){
if( !DeltaCheck(theta) ) warning("Arg. theta is not in Delta_p!")
# modify y <- MapToDelta(y)
while( !DeltaCheck((y-theta)[y-theta>=0]) ){
i <- which(diff(y-theta) > 0)[1] # begining of the first nondecreasing subsequence in y-theta
j <- i + which(diff( (y-theta)[-(1:i)] ) < 0)[1] # end of the first nondecreasing subsequence in y-theta
y[i:j] <- mean(y[i:j])
theta[i:j] <- mean(theta[i:j])
}
return(list("y"=y, "theta"=theta))
# return( as.numeric( lapply( y-theta, function(x) max(x,0) ) ) )
}
a
a <- MapToDelta(a)
a
a <- a$w
a
theta <- MapToDelta(rnorm(10))$w
theta
b <- FastProxSL1(a, theta)
b$y
b$theta
b$y - b$theta
a-theta
a
theta
a-theta
b$y-b$theta
mean((a-theta)[2:6])
a[7:9] <- 7
a
a-theta
a[7:9] <- 6.8
a-theta
b <- FastProxSL1(a, theta)
b$y-b$theta
a
a <randn(10)
a <- rnorm(5)
theta <- rnorn(5)
theta <- rnorm(5)
theta <- MapToDelta(theta)
theta <- theta$w
theta
a
FastProxSL1(a, theta)
if( !DeltaCheck(theta) ) warning("Arg. theta is not in Delta_p!")
FastProxSL1 <- function( y, theta){
if( !DeltaCheck(theta) ) warning("Arg. theta is not in Delta_p!")
foo <- MapToDelta(y)
y <- foo$w
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
while( !DeltaCheck(bar) ){
print(y-theta)
i <- which(diff(y-theta) > 0)[1] # begining of the first nondecreasing subsequence in y-theta
j <- i + which(diff( (y-theta)[-(1:i)] ) < 0)[1] # end of the first nondecreasing subsequence in y-theta
y[i:j] <- mean(y[i:j])
theta[i:j] <- mean(theta[i:j])
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
}
return( RetrV(bar, foo$sgn, foo$P))
}
FastProxSL1(a, theta)
a
theta
FastProxSL1(a, theta)
a-theta
FastProxSL1 <- function( y, theta){
if( !DeltaCheck(theta) ) warning("Arg. theta is not in Delta_p!")
foo <- MapToDelta(y)
print(y)
y <- foo$w
print(y)
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
while( !DeltaCheck(bar) ){
print(y-theta)
i <- which(diff(y-theta) > 0)[1] # begining of the first nondecreasing subsequence in y-theta
j <- i + which(diff( (y-theta)[-(1:i)] ) < 0)[1] # end of the first nondecreasing subsequence in y-theta
y[i:j] <- mean(y[i:j])
theta[i:j] <- mean(theta[i:j])
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
}
return( RetrV(bar, foo$sgn, foo$P))
}
FastProxSL1(a, theta)
theta
y
a
a-theta
a <- a + 3
a-theta
FastProxSL1 <- function( y, theta){
if( !DeltaCheck(theta) ) warning("Arg. theta is not in Delta_p!")
foo <- MapToDelta(y)
y <- foo$w
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
while( !DeltaCheck(bar) ){
print(y-theta)
i <- which(diff(y-theta) > 0)[1] # begining of the first nondecreasing subsequence in y-theta
j <- i + which(diff( (y-theta)[-(1:i)] ) < 0)[1] # end of the first nondecreasing subsequence in y-theta
y[i:j] <- mean(y[i:j])
theta[i:j] <- mean(theta[i:j])
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
}
return( RetrV(bar, foo$sgn, foo$P))
}
FastProxSL1(a, theta)
foo <- FastProxSL1(a,theta)
foo
FastProxSL1 <- function( y, theta){
if( !DeltaCheck(theta) ) warning("Arg. theta is not in Delta_p!")
foo <- MapToDelta(y)
y <- foo$w
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
while( !DeltaCheck(bar) ){
print(y-theta)
i <- which(diff(y-theta) > 0)[1] # begining of the first nondecreasing subsequence in y-theta
j <- i + which(diff( (y-theta)[-(1:i)] ) < 0)[1] # end of the first nondecreasing subsequence in y-theta
y[i:j] <- mean(y[i:j])
theta[i:j] <- mean(theta[i:j])
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
}
print(y-theta)
return( RetrV(bar, foo$sgn, foo$P))
}
FastProxSL1(a, theta)
a-theta
a <- a-2
a
a-theta
FastProxSL1(a, theta)
theta
a
a
a <- a+0.2
FastProxSL1(a, theta)
FastProxSL1(a, c(1,1,1,1,1))
a
print(FastProxSL1(seq(from=-5, to=5, by=1), theta=rep(2, times=11)))
print(foo <- sample(seq(from=-5, to=5, by=1), 11))
print(FastProxSL1(foo, theta=rep(2, times=11)))
FastProxSL1 <- function( y, theta){
if( !DeltaCheck(theta) ) warning("Arg. theta is not in Delta_p!")
foo <- MapToDelta(y)
y <- foo$w
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
while( !DeltaCheck(bar) ){
i <- which(diff(y-theta) > 0)[1] # begining of the first nondecreasing subsequence in y-theta
j <- i + which(diff( (y-theta)[-(1:i)] ) < 0)[1] # end of the first nondecreasing subsequence in y-theta
y[i:j] <- mean(y[i:j])
theta[i:j] <- mean(theta[i:j])
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
}
print(y-theta)
return( RetrV(bar, foo$sgn, foo$P))
}
print(foo <- sample(seq(from=-5, to=5, by=1), 11))
print(FastProxSL1(foo, theta=rep(2, times=11)))
FastProxSL1 <- function( y, theta){
if( !DeltaCheck(theta) ) warning("Arg. theta is not in Delta_p!")
foo <- MapToDelta(y)
y <- foo$w
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
while( !DeltaCheck(bar) ){
i <- which(diff(y-theta) > 0)[1] # begining of the first nondecreasing subsequence in y-theta
j <- i + which(diff( (y-theta)[-(1:i)] ) < 0)[1] # end of the first nondecreasing subsequence in y-theta
y[i:j] <- mean(y[i:j])
theta[i:j] <- mean(theta[i:j])
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
}
return( RetrV(bar, foo$sgn, foo$P))
}
print(foo <- sample(seq(from=-5, to=5, by=1), 11))
print(FastProxSL1(foo, theta=rep(2, times=11)))
FastProxSL1 <- function( y, theta){
if( !DeltaCheck(theta) ) warning("Arg. theta is not in Delta_p!")
foo <- MapToDelta(y)
y <- foo$w
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
while( !DeltaCheck(bar) ){
i <- which(diff(y-theta) > 0)[1] # begining of the first nondecreasing subsequence in y-theta
j <- i + which(diff( (y-theta)[-(1:i)] ) < 0)[1] # end of the first nondecreasing subsequence in y-theta
y[i:j] <- mean(y[i:j])
theta[i:j] <- mean(theta[i:j])
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
}
return( RetrV(bar, foo$sgn, foo$P))
}
print(foo <- sample(seq(from=-5, to=5, by=1), 11))
print(FastProxSL1(foo, theta=rep(2, times=11)))
rm(list=ls())
library(gsubfn) # for multivalued functions handling
MapToDelta <- function( v ){
sgn <- ((v>0) - 1/2)*2
foo <- sgn*v
bar <- sort(foo, decreasing = TRUE, index.return = TRUE)
return( list("w" = bar$x, "sgn" = sgn, "P" = bar$ix) )
}
RetrV <- function( w, sgn, P ){
# retrieves the inverse permutation to P, i.e.
# finds [ j: P[j]=i ]_i
foo <- as.numeric(
lapply(c(1:length(w)), function(x) (which(P == x)))
)
return( w[foo]*sgn )
}
foo <- rnorm(10)
bar <- MapToDelta(foo)
print( data.frame("v" = foo, "w" = bar$w) )
print( isTRUE( all.equal((foo*bar$sgn)[bar$P], bar$w) ) )
print( isTRUE( all.equal(RetrV(bar$w, bar$sgn, bar$P), foo) ) )
foo <- rnorm(5)
bar <- MapToDelta(foo)
print( data.frame("v" = foo, "w" = bar$w) )
print( isTRUE( all.equal((foo*bar$sgn)[bar$P], bar$w) ) )
print( isTRUE( all.equal(RetrV(bar$w, bar$sgn, bar$P), foo) ) )
DeltaCheck <- function( v ){
# return( isTRUE(all.equal(v, MapToDelta(v)$w )) )
return( max(diff(v)) <= 0 && min(v) >= 0  )
}
FastProxSL1 <- function( y, theta){
if( !DeltaCheck(theta) ) warning("Arg. theta is not in Delta_p!")
foo <- MapToDelta(y)
y <- foo$w
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
while( !DeltaCheck(bar) ){
i <- which(diff(y-theta) > 0)[1] # begining of the first nondecreasing subsequence in y-theta
j <- i + which(diff( (y-theta)[-(1:i)] ) < 0)[1] # end of the first nondecreasing subsequence in y-theta
y[i:j] <- mean(y[i:j])
theta[i:j] <- mean(theta[i:j])
bar <- as.numeric( lapply( y-theta, function(x) max(x,0) ) )
}
return( RetrV(bar, foo$sgn, foo$P))
}
print(foo <- sample(seq(from=-5, to=5, by=1), 11))
print(FastProxSL1(foo, theta=rep(2, times=11)))
print(foo <- sample(seq(from=-4, to=4, by=1), 9))
print(FastProxSL1(foo, theta=rep(2, times=9)))
