(x@x-x_old) %*% t(x@A) %*% (x@A %*% x_old - x@y)
0.5*sum((x@x-x_old)**2)/x@stepSize +
MapToDelta(x@lambda)$w %*% MapToDelta(x@x)$w
print(Qxy)
print(x@lossFun(x))
if(x@lossFun(x) <= Qxy){
break
} else{
x@stepSize <- x@stepSize / 0.9
print(x@stepSize)
}
x@x <- x_old
}
return(x)
})
backTrack(ISTA)
stepSize=10
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, backtrack=TRUE)
setMethod("backTrack", "ISTA-SLOPE", function(x){
x_old <- x@x
repeat{
foo <- x_old - x@stepSize * t(x@A) %*% (x@A %*% x_old - x@y)
x@x <- as.numeric(FastProxSL1(foo, x@stepSize * x@lambda))
Qxy <- sum((x@A%*%x_old-x@y)**2)/2 +
(x@x-x_old) %*% t(x@A) %*% (x@A %*% x_old - x@y) +
0.5*sum((x@x-x_old)**2)*x@stepSize +
MapToDelta(x@lambda)$w %*% MapToDelta(x@x)$w
print(Qxy)
print(x@lossFun(x))
if(x@lossFun(x) <= Qxy){
break
} else{
x@stepSize <- x@stepSize * 0.9
print(x@stepSize)
}
x@x <- x_old
}
return(x)
})
backTrack(ISTA)
setMethod("backTrack", "ISTA-SLOPE", function(x){
x_old <- x@x
repeat{
foo <- x_old - x@stepSize * t(x@A) %*% (x@A %*% x_old - x@y)
x@x <- as.numeric(FastProxSL1(foo, x@stepSize * x@lambda))
Qxy <- sum((x@A%*%x_old-x@y)**2)/2 +
(x@x-x_old) %*% t(x@A) %*% (x@A %*% x_old - x@y) +
0.5*sum((x@x-x_old)**2)*x@stepSize +
MapToDelta(x@lambda)$w %*% MapToDelta(x@x)$w
if(x@lossFun(x) <= Qxy){
break
} else{
x@stepSize <- x@stepSize * 0.9
}
x@x <- x_old
}
return(x)
})
source("IterativeAlgs.R")
stepSize=10
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, backtrack=TRUE)
ISTA_res <- runAlg(ISTA)
backTrack(ISTA)
ISTA_res <- runAlg(ISTA)
setMethod("backTrack", "ISTA-SLOPE", function(x){
x_old <- x@x
repeat{
foo <- x_old - x@stepSize * t(x@A) %*% (x@A %*% x_old - x@y)
x@x <- as.numeric(FastProxSL1(foo, x@stepSize * x@lambda))
Qxy <- sum((x@A%*%x_old-x@y)**2)/2 +
(x@x-x_old) %*% t(x@A) %*% (x@A %*% x_old - x@y) +
0.5*sum((x@x-x_old)**2)*x@stepSize +
MapToDelta(x@lambda)$w %*% MapToDelta(x@x)$w
print(Qxy)
if(x@lossFun(x) <= Qxy){
break
} else{
x@stepSize <- x@stepSize * 0.9
}
x@x <- x_old
}
return(x)
})
source("IterativeAlgs.R")
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, backtrack=TRUE)
ISTA_res <- runAlg(ISTA)
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=0.1, backtrack=TRUE)
ISTA_res <- runAlg(ISTA)
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=100, backtrack=TRUE)
ISTA_res <- runAlg(ISTA)
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=0.1, backtrack=TRUE)
ISTA_res <- runAlg(ISTA)
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=100, backtrack=TRUE)
ISTA_res <- runAlg(ISTA)
setMethod("backTrack", "ISTA-SLOPE", function(x){
x_old <- x@x
repeat{
foo <- x_old - x@stepSize * t(x@A) %*% (x@A %*% x_old - x@y)
x@x <- as.numeric(FastProxSL1(foo, x@stepSize * x@lambda))
Qxy <- sum((x@A%*%x_old-x@y)**2)/2 +
(x@x-x_old) %*% t(x@A) %*% (x@A %*% x_old - x@y) +
0.5*sum((x@x-x_old)**2)*x@stepSize +
MapToDelta(x@lambda)$w %*% MapToDelta(x@x)$w
if(x@lossFun(x) <= Qxy){
break
} else{
x@stepSize <- x@stepSize * 0.9
}
print(x@stepSize)
x@x <- x_old
}
return(x)
})
stepSize=10
source("IterativeAlgs.R")
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=100, backtrack=TRUE)
ISTA_res <- runAlg(ISTA)
setMethod("backTrack", "ISTA-SLOPE", function(x){
x_old <- x@x
repeat{
foo <- x_old - x@stepSize * t(x@A) %*% (x@A %*% x_old - x@y)
x@x <- as.numeric(FastProxSL1(foo, x@stepSize * x@lambda))
Qxy <- sum((x@A%*%x_old-x@y)**2)/2 +
(x@x-x_old) %*% t(x@A) %*% (x@A %*% x_old - x@y) +
0.5*sum((x@x-x_old)**2)*x@stepSize +
MapToDelta(x@lambda)$w %*% MapToDelta(x@x)$w
print(Qxy)
if(x@lossFun(x) <= Qxy){
break
} else{
x@stepSize <- x@stepSize * 0.9
}
print(x@stepSize)
x@x <- x_old
}
return(x)
})
source("IterativeAlgs.R")
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=100, backtrack=TRUE)
ISTA_res <- runAlg(ISTA)
setMethod("backTrack", "ISTA-SLOPE", function(x){
x_old <- x@x
repeat{
foo <- x_old - x@stepSize * t(x@A) %*% (x@A %*% x_old - x@y)
x@x <- as.numeric(FastProxSL1(foo, x@stepSize * x@lambda))
Qxy <- sum((x@A%*%x_old-x@y)**2)/2 +
(x@x-x_old) %*% t(x@A) %*% (x@A %*% x_old - x@y) +
0.5*sum((x@x-x_old)**2)*x@stepSize +
MapToDelta(x@lambda)$w %*% MapToDelta(x@x)$w
print(Qxy)
print(x@lossFun(x))
print(x@stepSize)
if(x@lossFun(x) <= Qxy){
break
} else{
x@stepSize <- x@stepSize * 0.9
}
print(x@stepSize)
x@x <- x_old
}
return(x)
})
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=100, backtrack=TRUE)
ISTA_res <- runAlg(ISTA)
setMethod("backTrack", "ISTA-SLOPE", function(x){
x_old <- x@x
print(x_old)
repeat{
foo <- x_old - x@stepSize * t(x@A) %*% (x@A %*% x_old - x@y)
x@x <- as.numeric(FastProxSL1(foo, x@stepSize * x@lambda))
print(x@x)
Qxy <- sum((x@A%*%x_old-x@y)**2)/2 +
(x@x-x_old) %*% t(x@A) %*% (x@A %*% x_old - x@y) +
0.5*sum((x@x-x_old)**2)*x@stepSize +
MapToDelta(x@lambda)$w %*% MapToDelta(x@x)$w
print(Qxy)
print(x@lossFun(x))
print(x@stepSize)
if(x@lossFun(x) <= Qxy){
break
} else{
x@stepSize <- x@stepSize * 0.9
}
print(x@stepSize)
x@x <- x_old
}
return(x)
})
ISTA_res <- runAlg(ISTA)
setMethod("backTrack", "ISTA-SLOPE", function(x){
x_old <- x@x
stepSize <- x@stepSize
print(x_old)
repeat{
foo <- x_old - stepSize * t(x@A) %*% (x@A %*% x_old - x@y)
x@x <- as.numeric(FastProxSL1(foo, stepSize * x@lambda))
print(x@x)
Qxy <- sum((x@A%*%x_old-x@y)**2)/2 +
(x@x-x_old) %*% t(x@A) %*% (x@A %*% x_old - x@y) +
0.5*sum((x@x-x_old)**2)*stepSize +
MapToDelta(x@lambda)$w %*% MapToDelta(x@x)$w
print(Qxy)
print(x@lossFun(x))
print(stepSize)
if(x@lossFun(x) <= Qxy){
break
} else{
stepSize <- stepSize * 0.9
}
print(stepSize)
x@x <- x_old
x@stepSize <- stepSize
}
return(x)
})
ISTA_res <- runAlg(ISTA)
setMethod("backTrack", "ISTA-SLOPE", function(x){
x_old <- x@x
stepSize <- x@stepSize
repeat{
foo <- x_old - stepSize * t(x@A) %*% (x@A %*% x_old - x@y)
x@x <- as.numeric(FastProxSL1(foo, stepSize * x@lambda))
Qxy <- sum((x@A%*%x_old-x@y)**2)/2 +
(x@x-x_old) %*% t(x@A) %*% (x@A %*% x_old - x@y) +
0.5*sum((x@x-x_old)**2)/stepSize +
MapToDelta(x@lambda)$w %*% MapToDelta(x@x)$w
print(Qxy)
print(x@lossFun(x))
print(stepSize)
if(x@lossFun(x) <= Qxy){
break
} else{
stepSize <- stepSize * 0.9
}
print(stepSize)
x@x <- x_old
x@stepSize <- stepSize
}
return(x)
})
ISTA_res <- runAlg(ISTA)
ISTA_res@x
ISTA@x
ISTA_res@x
x
abs(x-ISTA@x)
max(abs(x-ISTA@x))
max(abs(x-ISTA_res@x))
ISTA_res@iteration
setMethod("backTrack", "ISTA-SLOPE", function(x){
x_old <- x@x
stepSize <- x@stepSize
repeat{
foo <- x_old - stepSize * t(x@A) %*% (x@A %*% x_old - x@y)
x@x <- as.numeric(FastProxSL1(foo, stepSize * x@lambda))
Qxy <- sum((x@A%*%x_old-x@y)**2)/2 +
(x@x-x_old) %*% t(x@A) %*% (x@A %*% x_old - x@y) +
0.5*sum((x@x-x_old)**2)/stepSize +
MapToDelta(x@lambda)$w %*% MapToDelta(x@x)$w
if(x@lossFun(x) <= Qxy){
break
} else{
stepSize <- stepSize * 0.8
}
x@x <- x_old
x@stepSize <- stepSize
}
return(x)
})
setMethod("algUpdate", "ISTA-SLOPE", function(x){
foo <- x@x - x@stepSize * t(x@A) %*% (x@A %*% x@x - x@y)
x@x <- as.numeric(FastProxSL1(foo, x@stepSize * x@lambda))
return(x)
})
source("IterativeAlgs.R")
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=100, backtrack=TRUE)
FISTA <- new("FISTA-SLOPE", y=y, A=A, x=x0, x_old=x0, u=x0, lambda=lambda, stepSize=stepSize, t=1, t_old=1)
ISTA_res <- runAlg(ISTA)
ISTA@x
ISTA_res@x
x
FISTA <- new("FISTA-SLOPE", y=y, A=A, x=x0, x_old=x0, u=x0, lambda=lambda, stepSize=stepSize, t=1, t_old=1)
FISTA_res <- runAlg(FISTA)
FITSA_res@x
FISTA_res@x
max(abs(FISTA_res@x-x))
library(ggplot2)
library(reshape2)
t <- c(1:length(ISTA@loss))
df <- data.frame(t, ISTA_res@loss[t], FISTA_res@loss[t])#, AMP_res@loss[t])
colnames(df) <- c("iteration","ISTA","FISTA")#,"AMP")
df <- melt(df, id="iteration")
ggplot(data = df,
aes(x=iteration, y=value, colour=variable))+
geom_line(size=.5) +
ggtitle("Loss evolution")
ISTA_res@loss
length(ISTA@loss)
t <- c(1:length(ISTA_res@loss))
df <- data.frame(t, ISTA_res@loss[t], FISTA_res@loss[t])#, AMP_res@loss[t])
colnames(df) <- c("iteration","ISTA","FISTA")#,"AMP")
df <- melt(df, id="iteration")
ggplot(data = df,
aes(x=iteration, y=value, colour=variable))+
geom_line(size=.5) +
ggtitle("Loss evolution")
t <- c(1:500))
df <- data.frame(t, ISTA_res@loss[t], FISTA_res@loss[t])#, AMP_res@loss[t])
colnames(df) <- c("iteration","ISTA","FISTA")#,"AMP")
df <- melt(df, id="iteration")
ggplot(data = df,
aes(x=iteration, y=value, colour=variable))+
geom_line(size=.5) +
ggtitle("Loss evolution")
t <- c(1:500)
df <- data.frame(t, ISTA_res@loss[t], FISTA_res@loss[t])#, AMP_res@loss[t])
colnames(df) <- c("iteration","ISTA","FISTA")#,"AMP")
df <- melt(df, id="iteration")
ggplot(data = df,
aes(x=iteration, y=value, colour=variable))+
geom_line(size=.5) +
ggtitle("Loss evolution")
ggplot(data = df,
aes(x=iteration, y=value, colour=variable))+
geom_line(size=.5) +
ggtitle("Loss evolution")
1:10
c(1:10)
t <- c(1:500)
df <- data.frame(t, ISTA_res@loss[t], FISTA_res@loss[t])#, AMP_res@loss[t])
colnames(df) <- c("iteration","ISTA","FISTA")#,"AMP")
df <- melt(df, id="iteration")
ggplot(data = df,
aes(x=iteration, y=value, colour=variable))+
geom_line(size=.5) +
ggtitle("Loss evolution")
t <- c(1:100)
df <- data.frame(t, ISTA_res@loss[t], FISTA_res@loss[t])#, AMP_res@loss[t])
colnames(df) <- c("iteration","ISTA","FISTA")#,"AMP")
df <- melt(df, id="iteration")
ggplot(data = df,
aes(x=iteration, y=value, colour=variable))+
geom_line(size=.5) +
ggtitle("Loss evolution")
t <- c(1:30)
df <- data.frame(t, ISTA_res@loss[t], FISTA_res@loss[t])#, AMP_res@loss[t])
colnames(df) <- c("iteration","ISTA","FISTA")#,"AMP")
df <- melt(df, id="iteration")
ggplot(data = df,
aes(x=iteration, y=value, colour=variable))+
geom_line(size=.5) +
ggtitle("Loss evolution")
max(abs(FISTA_res@x-ISTA_res@x))
AMP <-   new("AMP-SLOPE", y=y, A=A, x=x0, x_old=x0, prior=x0, lambda=lambda, max_iter=10)
initParams(AMP)
source("IterativeAlgs.R")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda, alpha=alpha, max_iter=10)
AMP@alpha
AMP@lambda
AMP@x
AMP <- initParams(AMP)
AMP_res <- runAlg(AMP)
AMP_res@x
AMP_res@delta
AMP_res@tau
AMP_res@tau_ast
AMP_res@t
AMP_res@v
AMP@lambda*AMP@t
AMP_res@lambda*AMP_res@t
setMethod("algUpdate", "AMP-SLOPE", function(x){
x@x_old <- x@x
x@x <- as.numeric(FastProxSL1(x@x_old - x@v, x@lambda * x@t))
x@v <- as.numeric( t(x@A) %*% (x@A %*% x@x - x@y) + x@v*ZeroAstNorm(x@x)/x@n )
tau_old = x@tau
x@tau <-  sqrt(F(x@tau, x@alpha, x@delta, x@prior, x@sigma2))
x@t <- x@t*x@tau/tau_old
return(x)
})
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda, alpha=alpha, max_iter=10)
AMP_res <- runAlg(AMP)
AMP_res@x
library("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("IterativeAlgs.R")
library(ggplot2, respape2)
set.seed(351759)
p=500;delta=0.5;eps=0.1;sigma=0;n=p*delta
A=matrix(rnorm(n*p,mean=0,sd=1/sqrt(p*delta)), n,p)
alpha=c(rep(1,p*delta),rep(0,p*(1-delta)))
stepSize=10;maxIter=10**3
x=rnorm(p)*rbinom(p,1,eps)
y=as.numeric(A%*%x+sigma*rnorm(n))
lambda <- alpha_to_lambda(alpha, x, delta)
x0=rnorm(p)*rbinom(p,1,eps)
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter)
FISTA <- new("FISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter)
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda, alpha=alpha, max_iter=10**2, backtrack=FALSE)
ISTA_res <- runAlg(ISTA)
foo <- c(1,2,3)
foo[-1]
foo[-2]
foo[-1]
foo[-1,]
foo[length(f00)]
foo[length(foo)]
ISTA@x
ISTA@loss
ISTA_res@loss
source("IterativeAlgs.R")
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter)
ISTA_res <- runAlg(ISTA)
source("IterativeAlgs.R")
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter)
ISTA_res <- runAlg(ISTA)
ISTA_res@x
ISTA_res@x_old
ISTA_res@x
ISTA_res@loss
source("IterativeAlgs.R")
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter)
ISTA_res <- runAlg(ISTA)
ISTA_res@x
ISTA_res@stepSize
ISTA_res@lambda
knitr::opts_chunk$set(echo = TRUE)
# Libraries
packages <- c("foreign", "lubridate", "ggplot2","reshape2")
lapply(packages, library, character.only = TRUE)
# working directory
#setwd("~/Dropbox/Uczelnia//")
library("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("/R-codes/IterativeAlgs.R")
source("R-codes/IterativeAlgs.R")
source("R-codes/IterativeAlgs.R")
source("R-codes/*")
source("R-codes")
foo <- rnorm(5)
bar <- MapToDelta(foo)
print( data.frame("v" = foo, "w" = bar$w) )
print(foo <- sample(seq(from=-4, to=4, by=1), 9))
print(FastProxSL1(foo, theta=rep(2, times=9)))
foo <- rnorm(5)
bar <- MapToDelta(foo)
print( data.frame("v" = foo, "w" = bar$w) )
print( isTRUE( all.equal((foo*bar$sgn)[bar$P], bar$w) ) )
print( isTRUE( all.equal(RetrV(bar$w, bar$sgn, bar$P), foo) ) )
# for theta = const, ProxSL1 is a shrinkage operator
print(foo <- sample(seq(from=-4, to=4, by=1), 9))
print(FastProxSL1(foo, theta=rep(2, times=9)))
```{r, echo=FALSE}
set.seed(351759)
p <- 200
delta <- 0.5
eps <- 0.1
sigma <- 0
n <- p*delta
A <- matrix(rnorm(n*p,mean=0,sd=1/sqrt(p*delta)), n,p)
alpha <- c(rep(1,p*delta),rep(0,p*(1-delta)))
stepSize <- 100
maxIter <- 10**3
x <- rnorm(p)*rbinom(p,1,eps)
y <- as.numeric(A%*%x+sigma*rnorm(n))
lambda <- alpha_to_lambda(alpha, x, delta)
rm(ls=list())
rm(list=ls())
library("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("R-codes")
library(ggplot2, respape2)
library("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("R-codes")
library(ggplot2, respape2)
set.seed(351759)
p <- 200
delta <- 0.5
eps <- 0.1
sigma <- 0
n <- p*delta
A <- matrix(rnorm(n*p,mean=0,sd=1/sqrt(p*delta)), n,p)
alpha <- c(rep(1,p*delta),rep(0,p*(1-delta)))
stepSize <- 100
maxIter <- 10**3
x <- rnorm(p)*rbinom(p,1,eps)
y <- as.numeric(A%*%x+sigma*rnorm(n))
lambda <- alpha_to_lambda(alpha, x, delta)
source("R-codes\Analysis.R")
source("R-codes/Analysis.R")
source("R-codes/FastProxSL1")
source("R-codes/FastProxSL1.R")
source("R-codes/FastProxSL1.R")
source("R-codes/lambda-alpha.R")
source("R-codes/alpha-lambda.R")
source("R-codes/alpha-lambda.R")
source("R-codes/iterativeAlgs.R")
source("R-codes/iterativeAlgs.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("R-codes/iterativeAlgs.R")
source("R-codes/IterativeAlgs.R")
library("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("R-codes/FastProxSL1.R")
source("R-codes/alpha-lambda.R")
source("R-codes/IterativeAlgs.R")
source("R-codes/IterativeAlgs.R")
source("R-codes/IterativeAlgs.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
