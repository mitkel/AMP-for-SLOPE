return( alpha*tau_ast*(1-ZeroAstNorm(prior - v)/n) )
}
lambda2 <- alpha2lambda(alpha, x, A, y, delta, tau_ast)
library(SLOPE)
prox_sorted_L1(y, lambda)
SLOPE::prox_sorted_L1
library(SLOPE)
prox_sorted_L1
help("SLOPE")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE)
AMP_res <- runAlg(AMP)
help(SLOPE)
AMP_res@loss
library(SLOPE)
FastProxSL1(y, lambda)
y
lambda
y
FastProxSL1(x, lambda)
FastProxSL1(A%*%x, lambda)
FastProxSL1(t(A)%*% A%*%x, lambda)
FastProxSL1(t(A)%*% (A%*%x - y) , lambda)
source("IterativeAlgs.R")
getwd()
setwd("/home/bartek/Dropbox/Uczelnia/Statystyka/AnaLSD/AMP-for-SLOPE/R-codes/")
source("IterativeAlgs.R")
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter)
FISTA <- new("FISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter)
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE)
ISTA_res <- runAlg(ISTA)
source("IterativeAlgs.R")
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter)
FISTA <- new("FISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter)
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE)
ISTA_res <- runAlg(ISTA)
source("IterativeAlgs.R")
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter, init_params=FALSE)
FISTA <- new("FISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter)
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE)
ISTA_res <- runAlg(ISTA)
ISTA_res@loss
source("IterativeAlgs.R")
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter, init_params=FALSE)
FISTA <- new("FISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter)
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE)
ISTA_res <- runAlg(ISTA)
10 % 2
10 %% 2
10 %% 3
AMP@iteration
1 %% 50
1 %% 50 == 1
if(TRUE) print("A")
source("IterativeAlgs.R")
ISTA <- new("ISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter, init_params=FALSE)
ISTA_res <- runAlg(ISTA)
ISTA_res@loss
ISTA@x
x
max(abs(ISTA@x-x))
mean(abs(ISTA@x-x))
sum(abs(ISTA@x-x))
FISTA <- new("FISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter, verbose=TRUE)
source("IterativeAlgs.R")
FISTA <- new("FISTA-SLOPE", y=y, A=A, x=x0, lambda=lambda, stepSize=stepSize, max_iter=maxIter, verbose=TRUE)
FISTA_res <- runAlg(FISTA)
SL1Loss(list("x"=x, "y"=y,"A"=A,""))
View(SL1Loss)
A%*%x-y
MapToDelta(x)$w %*% MapToDelta(lambda)$w
ISTA@loss
ISTA_res@loss
FISTA_res@loss
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
F(tau_ast, alpha, delta, x, sigma2)
F(tau_ast, alpha, delta, x, sigma2, iter=1)
F(tau_ast, alpha, delta, x, sigma2, iter=1)
F(tau_ast, alpha, delta, x, sigma2, iter=1)
F(tau_ast, alpha, delta, x, sigma2, iter=1)
F(tau_ast, alpha, delta, x, sigma2, iter=1)
F(tau_ast, alpha, delta, x, sigma2, iter=1)
F(tau_ast, alpha, delta, x, sigma2, iter=1)
F(tau_ast, alpha, delta, x, sigma2, iter=1)
F(tau_ast, alpha, delta, x, sigma2, iter=1)
F(tau_ast, alpha, delta, x, sigma2, iter=1)
F(tau_ast, alpha, delta, x, sigma2, iter=1)
F(tau_ast, alpha, delta, x, sigma2, iter=2)
F(tau_ast, alpha, delta, x, sigma2, iter=2)
F(tau_ast, alpha, delta, x, sigma2, iter=2)
F(tau_ast, alpha, delta, x, sigma2, iter=2)
F(tau_ast, alpha, delta, x, sigma2, iter=2)
F(tau_ast, alpha, delta, x, sigma2, iter=2)
F(tau_ast, alpha, delta, x, sigma2)
tau_ast
source("IterativeAlgs.R")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
source("IterativeAlgs.R")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
source("IterativeAlgs.R")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
source("IterativeAlgs.R")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
source("IterativeAlgs.R")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
source("IterativeAlgs.R")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP@alpha
anyNA(AMP@alpha)
anyNA(AMP@tau_ast)
tau_ast <- alpha_to_tau_ast(alpha, x, delta)
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, tau_ast = tau_ast, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res@loss
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, tau_ast = tau_ast, lambda=lambda, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res@loss
source("IterativeAlgs.R")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, tau_ast = tau_ast, lambda=lambda, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res <- runAlg(AMP)
source("IterativeAlgs.R")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, tau_ast = tau_ast, lambda=lambda, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res@loss
source("IterativeAlgs.R")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, tau_ast = tau_ast, lambda=lambda, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res@loss
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, tau_ast = tau_ast, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res@loss
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, tau_ast = tau_ast, lambda=lambda/10, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res@loss
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=prior, tau_ast = tau_ast, lambda=lambda/10, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
prior= function() rnorm(p)*rbinom(p,1,eps)
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=prior, tau_ast = tau_ast, lambda=lambda/10, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
source("IterativeAlgs.R")
prior= function() rnorm(p)*rbinom(p,1,eps)
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=prior, tau_ast = tau_ast, lambda=lambda/10, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res <- runAlg(AMP)
source("IterativeAlgs.R")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=prior, tau_ast = tau_ast, lambda=lambda/10, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
source("IterativeAlgs.R")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=prior, tau_ast = tau_ast, lambda=lambda/10, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res@loss
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=prior, tau_ast = tau_ast, lambda=lambda, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res@loss
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=prior, tau_ast = tau_ast, lambda=lambda, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res@loss
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=prior, tau_ast = tau_ast, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res@loss
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, tau_ast = tau_ast, lambda=lambda, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
source("IterativeAlgs.R")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, tau_ast = tau_ast, lambda=lambda, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res@loss
source("IterativeAlgs.R")
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, tau_ast = tau_ast, lambda=lambda, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res@loss
AMP <-   new("AMP-SLOPE", y=y, A=A, prior=x, tau_ast = tau_ast, lambda=lambda2, alpha=alpha, max_iter=20, backtrack=FALSE, verbose=TRUE)
AMP_res <- runAlg(AMP)
AMP_res@loss
tau_ast
alpha_to_tau_ast <- function(alpha, prior, delta, sigma2 = 0, iter = 10){
tau <- sqrt(sigma2 + mean(prior**2)/delta)
res <- tau
for(i in 1:iter){
tau <- sqrt(F(tau, alpha, delta, prior, sigma2))
res <- (res*(i-1) + tau)/i
}
return(res)
}
F <- function(tau, alpha, delta, prior, sigma2=0, iter = 10){
p <- length(alpha)
res <- 0
for(i in 1:iter){
foo <- prior()
res <- (res*(i-1) + mean( (FastProxSL1(foo + tau*rnorm(p), alpha*tau)-foo)**2)/delta)/i
}
return(sigma2+res)
}
alpha_to_tau_ast(alpha, prior, delta)
alpha_to_tau_ast <- function(alpha, prior, delta, sigma2 = 0, iter = 10){
tau <- sqrt(sigma2 + mean(prior()**2)/delta)
res <- tau
for(i in 1:iter){
tau <- sqrt(F(tau, alpha, delta, prior, sigma2))
res <- (res*(i-1) + tau)/i
}
return(res)
}
alpha_to_tau_ast(alpha, prior, delta)
tau_ast
F(tau_ast, alpha, delta, x)
F2= function(tau,alpha,prior=x0,iteration=100,sigma=0){
result=0
for (i in 1:iteration){
result=result+mean((FastProxSL1(prior+tau*rnorm(p),alpha*tau)-prior)^2)/iteration
}
return(sigma^2+result/delta)
}
F2(tau_ast,alpha, prior=x)
F2= function(tau,alpha,prior=x,iteration=10,sigma=0){
result=0
for (i in 1:iteration){
result=result+mean((FastProxSL1(prior+tau*rnorm(p),alpha*tau)-prior)^2)/iteration
}
return(sigma^2+result/delta)
}
F2(tau_ast,alpha)
alpha_to_tau_ast(alpha, x, delta)
alpha2tau=function(alpha_seq,max_iter=10,prior=x,sigma=0){
tau=sqrt(sigma^2+mean(prior^2)/delta)
record_tau=rep(0,max_iter) # initialize
for (t in 1:max_iter){
tau=sqrt(F(tau,alpha_seq,prior,sigma=sigma))
record_tau[t]=tau #record each tau
}
#print(record_tau)
return(mean(record_tau))
}
alpha2tau(alpha)
alpha2tau=function(alpha_seq,max_iter=10,prior=x,sigma=0){
tau=sqrt(sigma^2+mean(prior^2)/delta)
record_tau=rep(0,max_iter) # initialize
for (t in 1:max_iter){
tau=sqrt(F(tau,alpha_seq,prior,sigma=sigma))
record_tau[t]=tau #record each tau
}
#print(record_tau)
return(mean(record_tau))
}
alpha2tau(alpha)
alpha2tau(alpha,prior=x)
alpha2tau=function(alpha,delta,max_iter=10,prior=x,sigma=0){
tau=sqrt(sigma^2+mean(prior^2)/delta)
record_tau=rep(0,max_iter) # initialize
for (t in 1:max_iter){
tau=sqrt(F(tau,alpha,delta,prior,sigma=sigma))
record_tau[t]=tau #record each tau
}
#print(record_tau)
return(mean(record_tau))
}
alpha2tau(alpha,delta,prior=x)
tau_ast
alpha_to_tau_ast(alpha,x,delta)
alpha_to_tau_ast(alpha,x,delta)
tau_ast <- 0.1620572
lambda
lambda[1]
lambda2[1]
alpha__lambda=function(alpha_seq,delta,prior=x,max_iter=10,second_iter=100,sigma=0){
tau=sqrt(sigma^2+mean(prior^2)/delta)
record_tau=rep(0,max_iter) # initialize
for (t in 1:max_iter){
tau=sqrt(F(tau,alpha_seq,delta,prior,sigma=sigma))
record_tau[t]=tau #record each tau
}
tau=mean(record_tau)
E=0
for (t in 1:second_iter){
prox_solution=FastProxSL1(prior+tau*rnorm(p),alpha_seq*tau)
E=E+length(unique(abs(prox_solution)))/p/delta/second_iter
}
lambda_seq=(1-E)*alpha_seq*tau
return(lambda_seq)
}
alpha__lambda(alpha,delta)
alpha__lambda=function(alpha_seq,delta,prior=x,max_iter=10,second_iter=10,sigma=0){
tau=sqrt(sigma^2+mean(prior^2)/delta)
record_tau=rep(0,max_iter) # initialize
for (t in 1:max_iter){
tau=sqrt(F(tau,alpha_seq,delta,prior,sigma=sigma))
record_tau[t]=tau #record each tau
}
tau=mean(record_tau)
E=0
for (t in 1:second_iter){
prox_solution=FastProxSL1(prior+tau*rnorm(p),alpha_seq*tau)
E=E+length(unique(abs(prox_solution)))/p/delta/second_iter
}
lambda_seq=(1-E)*alpha_seq*tau
return(lambda_seq)
}
alpha__lambda(alpha,delta)
alpha_to_lambda(alpha,x,delta)
alpha__lambda=function(alpha_seq,delta,prior=x,max_iter=50,second_iter=50,sigma=0){
tau=sqrt(sigma^2+mean(prior^2)/delta)
record_tau=rep(0,max_iter) # initialize
for (t in 1:max_iter){
tau=sqrt(F(tau,alpha_seq,delta,prior,sigma=sigma))
record_tau[t]=tau #record each tau
}
tau=mean(record_tau)
E=0
for (t in 1:second_iter){
prox_solution=FastProxSL1(prior+tau*rnorm(p),alpha_seq*tau)
E=E+length(unique(abs(prox_solution)))/p/delta/second_iter
}
lambda_seq=(1-E)*alpha_seq*tau
return(lambda_seq)
}
alpha__lambda(alpha,delta,)
alpha__lambda(alpha,delta)
alpha2lambda(alpha,xA,y,delta,tau_ast)
alpha2lambda(alpha,x,A,y,delta,tau_ast)
alpha__lambda(c(1,1,1,0,0,0),delta)
alpha_to_lambda(c(1,1,1,0,0,0),delta)
alpha_to_lambda(c(1,1,1,0,0,0),x[1:6],delta)
alpha_to_lambda(c(1,1,1,0,0,0),x[1:6],delta)
alpha_to_lambda(c(1,1,1,0,0,0),x[10:16],delta)
alpha_to_lambda(c(1,1,1,0,0,0),x[10:15],delta)
alpha_to_lambda(c(1,1,1,0,0,0),x[1:6],delta)
FastProxSL1(c(1,2), c(0,0))
alpha_to_lambda(c(1,1,1,0,0,0),c(0,0,0,0,0,0),delta)
alpha_to_lambda(c(1,1,1,0,0,0),x[1:10],delta)
alpha_to_lambda(c(1,1,1,0,0,0),x[1:12],delta)
alpha_to_lambda(c(1,1,1,0,0,0),x[1:6],delta)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delt)
x[1:6]
delta
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta)
alpha_to_tau_ast(c(1,1,1,0,0,0), x[1:6], delta)
tau <- sqrt(sigma2 + mean(x[1:6]**2)/delta)
tau
FastProxSL1(x[1:6]+tau*rnorm(6), c(1,1,1,0,0,0)*tau)-x[1:6]
FastProxSL1(x[1:6]+tau*rnorm(6), c(1,1,1,0,0,0)*tau)-x[1:6]
FastProxSL1(x[1:6]+tau*rnorm(6), c(1,1,1,0,0,0)*tau)-x[1:6]
FastProxSL1(x[1:6]+tau*rnorm(6), c(1,1,1,0,0,0)*tau)-x[1:6]
FastProxSL1(x[1:6]+tau*rnorm(6), c(1,1,1,0,0,0)*tau)-x[1:6]
FastProxSL1(x[1:6]+tau*rnorm(6), c(1,1,1,0,0,0)*tau)-x[1:6]
FastProxSL1(x[1:6]+tau*rnorm(6), c(1,1,1,0,0,0)*tau)-x[1:6]
FastProxSL1(x[1:6]+tau*rnorm(6), c(1,1,1,0,0,0)*tau)-x[1:6]
FastProxSL1(x[1:6]+tau*rnorm(6), c(1,1,1,0,0,0)*tau)-x[1:6]
FastProxSL1(x[1:6]+tau*rnorm(6), c(1,1,1,0,0,0)*tau)-x[1:6]
FastProxSL1(x[1:6]+tau*rnorm(6), c(1,1,1,0,0,0)*tau)-x[1:6]
FastProxSL1(x[1:6]+tau*rnorm(6), c(1,1,1,0,0,0)*tau)-x[1:6]
F(tau, c(1,1,1,0,0,0), delta, x)
F(tau, c(1,1,1,0,0,0), delta, x[1:6])
F <- function(tau, alpha, delta, prior, sigma2=0, iter = 10){
p <- length(alpha)
res <- 0
for(i in 1:iter){
foo <- prior
print(foo,tau,p,alpha,delta)
res <- (res*(i-1) + mean( (FastProxSL1(foo + tau*rnorm(p), alpha*tau)-foo)**2)/delta)/i
}
return(sigma2+res)
}
F(tau, c(1,1,1,0,0,0), delta, x[1:6])
F <- function(tau, alpha, delta, prior, sigma2=0, iter = 10){
p <- length(alpha)
res <- 0
for(i in 1:iter){
foo <- prior
print(paste0(foo,tau,p,alpha,delta, sep=";"))
res <- (res*(i-1) + mean( (FastProxSL1(foo + tau*rnorm(p), alpha*tau)-foo)**2)/delta)/i
}
return(sigma2+res)
}
F(tau, c(1,1,1,0,0,0), delta, x[1:6])
F <- function(tau, alpha, delta, prior, sigma2=0, iter = 10){
p <- length(alpha)
res <- 0
for(i in 1:iter){
foo <- prior
print(alpha)
print(foo)
print(tau)
print(delta)
res <- (res*(i-1) + mean( (FastProxSL1(foo + tau*rnorm(p), alpha*tau)-foo)**2)/delta)/i
}
return(sigma2+res)
}
F(tau, c(1,1,1,0,0,0), delta, x[1:6])
F <- function(tau, alpha, delta, prior, sigma2=0, iter = 10){
p <- length(alpha)
res <- 0
for(i in 1:iter){
foo <- prior
res <- (res*(i-1) + mean( (FastProxSL1(foo + tau*rnorm(p), alpha*tau)-foo)**2)/delta)/i
}
return(sigma2+res)
}
F(tau, c(1,1,1,0,0,0), delta, x[1:6])
F(tau, c(1,1,1,0,0,0), delta, x[1:6])
FastProxSL1(x[1:6]+tau*rnorm(6), c(1,1,1,0,0,0)*tau)-x[1:6]
alpha_to_tau_ast(c(1,1,1,0,0,0), x[1:6], delta)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta)
alpha__lambda(c(1,1,1,0,0,0),delta, x[1:6])
alpha__lambda=function(alpha_seq,delta,prior=x,max_iter=50,second_iter=50,sigma=0){
tau=sqrt(sigma^2+mean(prior^2)/delta)
record_tau=rep(0,max_iter) # initialize
for (t in 1:max_iter){
tau=sqrt(F(tau,alpha_seq,delta,prior,sigma=sigma))
record_tau[t]=tau #record each tau
}
tau=mean(record_tau)
E=0
for (t in 1:second_iter){
prox_solution=FastProxSL1(prior+tau*rnorm(p),alpha_seq*tau)
E=E+length(unique(abs(prox_solution)))/p/delta/second_iter
}
lambda_seq=(1-E)*alpha_seq*tau
return(lambda_seq)
}
alpha__lambda(c(1,1,1,0,0,0),delta, x[1:6])
alpha__lambda=function(alpha_seq,delta,prior=x,max_iter=50,second_iter=50,sigma=0){
p=length(alpha)
tau=sqrt(sigma^2+mean(prior^2)/delta)
record_tau=rep(0,max_iter) # initialize
for (t in 1:max_iter){
tau=sqrt(F(tau,alpha_seq,delta,prior,sigma=sigma))
record_tau[t]=tau #record each tau
}
tau=mean(record_tau)
E=0
for (t in 1:second_iter){
prox_solution=FastProxSL1(prior+tau*rnorm(p),alpha_seq*tau)
E=E+length(unique(abs(prox_solution)))/p/delta/second_iter
}
lambda_seq=(1-E)*alpha_seq*tau
return(lambda_seq)
}
alpha__lambda(c(1,1,1,0,0,0),delta, x[1:6])
alpha__lambda=function(alpha_seq,delta,prior=x,max_iter=50,second_iter=50,sigma=0){
p=length(alpha_seq)
tau=sqrt(sigma^2+mean(prior^2)/delta)
record_tau=rep(0,max_iter) # initialize
for (t in 1:max_iter){
tau=sqrt(F(tau,alpha_seq,delta,prior,sigma=sigma))
record_tau[t]=tau #record each tau
}
tau=mean(record_tau)
E=0
for (t in 1:second_iter){
prox_solution=FastProxSL1(prior+tau*rnorm(p),alpha_seq*tau)
E=E+length(unique(abs(prox_solution)))/p/delta/second_iter
}
lambda_seq=(1-E)*alpha_seq*tau
return(lambda_seq)
}
alpha__lambda(c(1,1,1,0,0,0),delta, x[1:6])
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 50)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 100)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 150)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 1000)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 1000)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 1000)
alpha__lambda(c(1,1,1,0,0,0),delta, x[1:6], max_iter = 1000, second_iter = 1000)
alpha__lambda(c(1,1,1,0,0,0),delta, x[1:6], max_iter = 1000, second_iter = 1000)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 1000)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 100)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 100)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 100)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 100)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 100)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 100)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 1000)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 1000)
alpha_to_lambda(c(1,1,1,0,0,0), x[1:6], delta, max_iter = 1000)
alpha2lambda(c(1,1,1,0,0,0), x[1:6], delta)
alpha2lambda(c(1,1,1,0,0,0), x[1:6], A[1:6,1:3], y[1:3], delta, tau_ast)
alpha2lambda(c(1,1,1,0,0,0), x[1:6], A[1:3,1:6], y[1:3], delta, tau_ast)
alpha2lambda(c(1,1,1,0,0,0), x[1:6], A[1:3,1:6], y[1:3], delta, tau_ast)
alpha2lambda(c(1,1,1,0,0,0), x[1:6], A[1:3,1:6], y[1:3], delta, tau_ast)
alpha2lambda(c(1,1,1,0,0,0), x[1:6], A[1:3,1:6], y[1:3], delta, tau_ast)
alpha_to_tau_ast(c(1,1,1,0,0,0), x[1:6], delta)
alpha2lambda(c(1,1,1,0,0,0), x[1:6], A[1:3,1:6], y[1:3], delta, 0.4571994)
alpha2lambda(c(1,1,1,0,0,0), x[1:6], A[1:3,1:6], y[1:3], delta, 0.4571994)
# library("rstudioapi")
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("R-codes/FastProxSL1.R")
source("R-codes/alpha-lambda.R")
source("R-codes/IterativeAlgs.R")
getwd()
# library("rstudioapi")
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("R-codes/FastProxSL1.R")
source("R-codes/alpha-lambda.R")
source("R-codes/IterativeAlgs.R")
set.seed(351759)
p <- 300
delta <- 0.5
eps <- 0.1
sigma2 <- 0
n <- p*delta
A <- matrix(rnorm(n*p,mean=0,sd=1/sqrt(p*delta)), n,p)
alpha <- c(rep(1,p*delta),rep(0,p*(1-delta)))
stepSize <- 10
maxIter <- 10**3
prior <- function() rnorm(p)*rbinom(p,1,eps)
x0 <- prior()
x <- rnorm(p)*rbinom(p,1,eps)
y <- as.numeric(A%*%x+sigma2*rnorm(n))
lambda <- alpha_to_lambda(alpha, x, delta)
