risk <- estimateRisk(Portf)
setMethod("estimateRisk",
signature(Portf = "InterestRateSwapPortfolio"),
function(Portf, simNo){
d <- seq.Date(T0, timeHorizon(Portf)-1, by="week")
P0 <- value(Portf)
EE <- 0
QuantMatr <- matrix(nrow = simNo, ncol = length(d)-2)
x <- HWGen(T = timeHorizon(Portf), npaths = simNo)
for(k in (1:simNo)){
P <- as.numeric(sapply(1:(length(d)-2), function(z) value(Portf, t=d[z], r=x[7*z,k])))
EE <- (EE*k + pmax(P0-P,0))/(k+1)
QuantMatr[k,] <- P
message(k)
}
EE <- EE*(simNo+1)/simNo
PFE <- apply(pmax(P0-QuantMatr,0), 2, function(x) quantile(x,prob=1-alpha))
EPFE <- sapply(1:length(PFE), function(x) max(PFE[1:x]))
res<-list(EE,PFE, EPFE)
return(res)
})
simulations <- 10
risk <- estimateRisk(Portf)
EE <- risk[[1]]
PFE <- risk[[2]]
EPFE <- risk[[3]]
d <- seq.Date(T0, timeHorizon(Portf)-1, by="week")
d <- d[1:length(EE)]
df <- melt(data.frame(d,EE,PFE,EPFE), id ="d")
ggplot(data=df,
aes(x=d, y=value, colour=variable))+
ggtile("Risk exposure")
ggplot(data=df,
aes(x=d, y=value, colour=variable))+
ggtitle("Risk exposure")
geom_line()+
labs(x="date",y="value")
ggplot(data=df,
aes(x=d, y=value, colour=variable))+
ggtitle("Risk exposure")+
geom_line()+
labs(x="date",y="value")
ggplot(data=df,
aes(x=d, y=value, colour=variable))+
ggtitle("Risk exposure")+
geom_line()+
labs(x="date",y="value")
p1<-ggplot(data=df,
aes(x=d, y=value, colour=variable))+
ggtitle("Risk exposure")+
geom_line()+
labs(x="date",y="value")
save(p1)
ggplot(data=df,
aes(x=d, y=value, colour=variable))+
ggtitle("Risk exposure")+
geom_line()+
labs(x="date",y="value")
packages <- c("foreign", "lubridate", "ggplot2","reshape2")
ggplot(data=df,
aes(x=d, y=value, colour=variable))+
ggtitle("Risk exposure")+
geom_line()+
labs(x="date",y="value")
lapply(packages, library, character.only = TRUE)
ggplot(data=df,
aes(x=d, y=value, colour=variable))+
ggtitle("Risk exposure")+
geom_line()+
labs(x="date",y="value")
EE <- risk[[1]]
PFE <- risk[[2]]
EPFE <- risk[[3]]
d <- seq.Date(T0, timeHorizon(Portf)-1, by="week")
d <- d[1:length(EE)]
df <- melt(data.frame(d,EE,PFE,EPFE), id ="d")
ggplot(data=df,
aes(x=d, y=value, colour=variable))+
ggtitle("Risk exposure")+
geom_line()+
labs(x="date",y="value")
ggplot(data=df,
aes(x=d, y=value, colour=variable))+
geom_line()+
ggtitle("Risk exposure")+
labs(x="date",y="value")
View(df)
ggplot(data=df,
aes(x=d, y=value, colour=variable))+
geom_line()
ggplot(data=df,
aes(x=d, y=value, colour=variable))+
geom_line()+
ggtitle("Risk exposure")+
labs(x="date",y="value")
simulations <- 800
r0 <- 0.003
a0 <- 0.2
sigma0 <- 0.001
fitTheta <- function(a = a0, sigma = sigma0){
DerivCFwd <- c(c((CFwd[2]-CFwd[1])*12),
diff(CFwd,2)*6,
c((CFwd[length(CFwd)]-CFwd[length(CFwd)-1])*12))
k <- c(1:60)
tk <- k/12
theta <- DerivCFwd + a * CFwd + sigma^2/(2*a)*(1-exp(-a*tk))
}
theta0 <- fitTheta()
risk <- estimateRisk(Portf)
EE <- risk[[1]]
PFE <- risk[[2]]
EPFE <- risk[[3]]
d <- seq.Date(T0, timeHorizon(Portf)-1, by="week")
d <- d[1:length(EE)]
df <- melt(data.frame(d,EE,PFE,EPFE), id ="d")
ggplot(data=df,
aes(x=d, y=value, colour=variable))+
geom_line()+
ggtitle("Risk exposure")+
labs(x="date",y="value")
ggplot(data=df,
aes(x=d, y=value, colour=variable))+
geom_line()+
ggtitle("Risk exposure")+
labs(x="date",y="value")
p1 <-ggplot(data=df,
aes(x=d, y=value, colour=variable))+
geom_line()+
ggtitle("Risk exposure")+
labs(x="date",y="value")
ggsave(filename="simNo_800", plot=p1)
ggsave(filename="simNo_800.png", plot=p1)
summary(EE)
summary(PFE)
summary(EPFE)
summary(PFE)
summary(EPFE)
summary(EE)
summary(PFE)
summary(EPFE)
aes(x=d, y=value, colour=variable))+
ggplot(data=df,
aes(x=d, y=value, colour=variable))+
geom_line()+
ggtitle("Risk exposure")+
labs(x="date",y="value")
summary(EE)
summary(PFE)
summary(EPFE)
theta <- vector(length = T-t0+1)
theta <- vector(length = T0+years(1)-T0+1)
theta[1] <- theta0[1]
for(i in 1:(T-t0)){
theta[i] <- theta0[1+floor(i/30)]/a0
}
for(i in 1:(T0+years(1)-T0)){
theta[i] <- theta0[1+floor(i/30)]/a0
}
x <- HWGen(npaths = 10)
t <- c(1:nrow(x))
df <- melt(data.frame(t, x, theta), id="t")
ggplot(data=df,
aes(x=t, y=value, colour=variable))+
geom_line(size=.2) +
ggtitle("Path simulation") +
geom_line(t="theta", color="black", size=1)
ggplot(data=df,
aes(x=t, y=value, colour=variable))+
geom_line(size=.2) +
ggtitle("Path simulation")
x <- HWGen(npaths = 10)
t <- c(1:nrow(x))
df <- melt(data.frame(t, x), id="t")
ggplot(data=df,
aes(x=t, y=value, colour=variable))+
geom_line(size=.2) +
ggtitle("Path simulation")
x <- HWGen(npaths = 10)
t <- c(1:nrow(x))
df <- melt(data.frame(t, x), id="t")
ggplot(data=df,
aes(x=t, y=value, colour=variable))+
geom_line(size=.2) +
ggtitle("Path simulation")
a <- seq(0,1, by = 0.01)
rm(ls=all())
rm(list=ls)
rm(list=ls())
a <- seq(0,1, by = 0.01)
a <- seq(0,1, by = 0.001)
theta <- seq(0,1, by = 0.001)
rm(a)
p <- seq(1,2, by = 0.001)
p <- seq(1, 2, by = 0.001)
p[3]
p[30]
func <- function(theta,p){
a <- 1 - 1/p
b <- 2 - theta
return max(a,b)
}
a <- 1 - 1/p;
func <- function(theta,p){
a <- 1 - 1/p;
b <- 2 - theta;
return max(a,b);
}
func <- function(theta,p){
a <- 1 - 1/p;
b <- 2 - theta;
return(max(a,b));
}
func(5,1)
func(1,10)
func(2,10)
e**(p-1)
exp(p-1)
theta**(p-1)
func <- function(theta,p){
a <- 1 - 1/p
b <- (1-2*(theta**p+(1+theta**p)-1)/(p*(p-1)*(1-theta)**2))*theta**(p-1)/(exp(p-1)*(1+theta)**(p-1))
return(max(a,b))
}
k_p <- function(p, theta){
(1-2*(theta**p+(1+theta**p)-1)/(p*(p-1)*(1-theta)**2))*theta**(p-1)/(exp(p-1)*(1+theta)**(p-1))
}
k_p <- function(p, theta){
(1-2*(theta**p+(1+theta**p)-1)/(p*(p-1)*(1-theta)**2))*theta**(p-1)/(exp(p-1)*(1+theta)**(p-1))
}
k_p(1.2,0.5)
k_p <- function(p, theta){
(1-2*(theta**p+(1+theta)**p-1)/(p*(p-1)*(1-theta)**2))*theta**(p-1)/(exp(p-1)*(1+theta)**(p-1))
}
k_p(1.2,0.5)
k_p(1.2,0.1)
k_p(1.2,0.01)
k_p(1.2,0.001)
k_p(1.2,0.01)
k_p <- function(p, theta){
(1-2*(theta**p+(1+theta)**p-1)/(p*(p-1)*(1-theta)**2))*((theta/(exp(1)*(1+theta)))**(p-1))
}
k_p(1.2,0.01)
max(p**2)
max(k_p(1.2,theta))
k <- function(p, theta){
(1-2*(theta**p+(1+theta)**p-1)/(p*(p-1)*(1-theta)**2))*((theta/(exp(1)*(1+theta)))**(p-1))
}
K_p <- function(p,theta){
a <- 1 - 1/p
b <- p/2*max(k_p(p,theta))
return(max(a,b))
}
p/2*max(p+theta)
for(i in length(p)){
K[i] <- K_p(p[i],theta)
}
theta <- seq(0,1, by = 0.001)
p <- seq(1, 2, by = 0.001)
k <- function(p, theta){
(1-2*(theta**p+(1+theta)**p-1)/(p*(p-1)*(1-theta)**2))*((theta/(exp(1)*(1+theta)))**(p-1))
}
K_p <- function(p,theta){
a <- 1 - 1/p
b <- p/2*max(k_p(p,theta))
return(max(a,b))
}
K <- vector()
for(i in length(p)){
K.append(K_p(p[i],theta))
}
K <- []
for(i in length(p)){
K.append(K_p(p[i],theta))
}
K <- []
K <- c()
for(i in length(p)){
K <- c(K,K_p(p[i],theta))
}
length(p)
for(i in length(p)){
K <- c(K,K_p(p[i],theta))
}
K <- c()
for(i in 1:length(p)){
K <- c(K,K_p(p[i],theta))
}
Best_constant <- max(K)
Best_constant <- max(K, na.rm=TRUE)
K_p(1.2,theta)
K_p(1.3,theta)
K_p(1.4,theta)
Best_constant <- min(K, na.rm=TRUE)
K_p(1.8,theta)
K_p(1.9,theta)
K_p(1.99,theta)
K_p(1.001,theta)
k(1.01, theta)
max(k(1.01, theta))
max(k(1.001, theta))
max(k(1.001, theta))
max(k(1.01, theta))
max(k(1.002, theta))
max(k(1.003, theta))
max(k(1.004, theta))
max(k(1.004, theta))
max(k(1.002, theta))
max(k(1.003, theta))
max(k(1.004, theta))
k(1.001,(p-1)**2)
k(1.001,(1.001-1)**2)
theta <- seq(0,1, by = 0.00001)
p <- seq(1, 2, by = 0.001)
k <- function(p, theta){
(1-2*(theta**p+(1+theta)**p-1)/(p*(p-1)*(1-theta)**2))*((theta/(exp(1)*(1+theta)))**(p-1))
}
K_p <- function(p,theta){
a <- 1 - 1/p
b <- p/2*max(k_p(p,theta))
return(max(a,b))
}
max(k(1.003, theta))
max(k(1.001, theta))
theta <- seq(0,1, by = 0.000001)
p <- seq(1, 2, by = 0.001)
k <- function(p, theta){
(1-2*(theta**p+(1+theta)**p-1)/(p*(p-1)*(1-theta)**2))*((theta/(exp(1)*(1+theta)))**(p-1))
}
K_p <- function(p,theta){
a <- 1 - 1/p
b <- p/2*max(k_p(p,theta))
return(max(a,b))
}
K <- c()
for(i in 1:length(p)){
K <- c(K,K_p(p[i],theta))
}
Best_constant <- min(K, na.rm=TRUE)
Best_constant <- min(K, na.rm=TRUE)
K <- c()
for(i in 1:length(p)){
K <- c(K,K_p(p[i],theta))
}
theta <- seq(0,1, by = 0.00001)
p <- seq(1, 2, by = 0.001)
k <- function(p, theta){
(1-2*(theta**p+(1+theta)**p-1)/(p*(p-1)*(1-theta)**2))*((theta/(exp(1)*(1+theta)))**(p-1))
}
K_p <- function(p,theta){
a <- 1 - 1/p
b <- p/2*max(k_p(p,theta))
return(max(a,b))
}
K <- c()
for(i in 1:length(p)){
K <- c(K,K_p(p[i],theta))
}
for(i in 1:length(p)){
K <- c(K,K_p(p[i],theta))
}
Best_constant <- min(K, na.rm=TRUE)
Best_constant <- min(K, na.rm=TRUE)
Best_constant
K_p(1.2,theta)
K_p(1.1,theta)
K_p(1.25,theta)
K_p(1.2,theta)
K_p(1.3,theta)
K_p(1.22,theta)
K_p(1.18,theta)
K_p(1.17,theta)
K_p(1.18,theta)
K_p(1.178,theta)
K_p(1.182,theta)
K_p(1.19,theta)
K_p(1.191,theta)
K_p(1.194,theta)
K_p(1.195,theta)
K_p(1.21,theta)
K_p(1.2,theta)
K_p(1.97,theta)
K_p(1.297,theta)
K_p(1.197,theta)
K_p(1.199,theta)
K_p(1.201,theta)
K_p(1.202,theta)
K_p(1.206,theta)
list
ls
rm(ls = all)
rm(list=ls())
p <- 500
mu <- seq(0, p)
mu[0:k] <- 5
mu[0:10] <- 5
view(mu)
View(mu)
mu <- rep(0, p)
mu[0:10] <- 5
View(mu)
p <- 50
n <- 100
mu <- rep(0, p)
X <- rnorm(n, mean=mu)
View(X)
View(X[1])
mu
X
mu <- rep(0, p)
mu[0:10] <- 5
mu
X <- rnorm(n, mean=mu)
X
X <- mvnorm(n, mu)
library(MASS)
p <- 50
n <- 100
mu <- rep(0, p)
mu[0:10] <- 5
X <- mvnorm(n, mu)
library(MASS)
X <- mvnorm(n, mu)
X <- mvrnorm(n, mu)
Sigma <- diag(rep(1,p))
Sigma
X <- mvrnorm(n, mu, Sigma)
X[1]
X[1,]
X[,1]
X[1,]
X[2],]
X[2,]
library(MASS)
set.seed(1759)
s1<-9
s2<-5
p <- 50
mu <- rep(0, p)
mu[0:s1] <- 2.5
alpha <- 0.1
X <- rnorm(p, mu, 1)
alpha <- 0.1
X2 <- X^2
T <- (X^2 - p)/sqrt(2p)
T <- (X^2 - p)/sqrt(2*p)
T <- (sum(X^2) - p)/sqrt(2*p)
alpha <- 0.1
qnorm(5,0,1)
qnorm(5,mean=0,sd=1)
qnorm(0.2,mean=0,sd=1)
pnorm(5,mean=0,sd=1)
pnorm(-5,mean=0,sd=1)
pnorm(T)
2*pnorm(T, lower.tail = FALSE)
if(alpha > 2*pnorm(T, lower.tail = FALSE)){"reject"}
if(alpha > 2*pnorm(T, lower.tail = FALSE)){"reject"}{"accept"}
else{"accept"}
else{"accept"}
if(alpha > 2*pnorm(T, lower.tail = FALSE)){"reject"}
if(alpha < 2*pnorm(T, lower.tail = FALSE)){"reject"}
else{"accept"}
if(alpha < 2*pnorm(T, lower.tail = FALSE)){"reject"}else{"accept"}
if(alpha > 2*pnorm(T, lower.tail = FALSE)){"reject"}else{"accept"}
if(alpha > 2*pnorm(T, lower.tail = FALSE)){"reject H0"}else{"accept H0"}
p-values <- 2*pnorm(X, lower.tail= FALSE)
pvalues <- 2*pnorm(X, lower.tail= FALSE)
pvals <- 2*pnorm(X, lower.tail= FALSE)
pvals
min(pvals)
if(alpha > 2*pnorm(T, lower.tail = FALSE)){"reject H0"}else{"accept H0"}
if(alpha > 2*pnorm(abs(T), lower.tail = FALSE)){"reject H0"}else{"accept H0"}
pvals <- 2*pnorm(abs(X))
pvals
pvals <- 2*pnorm(abs(X), lower.tail=FALSE)
pvals
if(min(pvals) < alpha/p){"reject H0"}else{"accept H0"}
getwd()
knit_with_parameters('~/Dropbox/Uczelnia/Statystyka/AnaLSD/AMP-for-SLOPE/main.Rmd')
knit_with_parameters('~/Dropbox/Uczelnia/Statystyka/AnaLSD/AMP-for-SLOPE/main.Rmd')
getwd()
rm(ls = all)
rm(list=ls())
source("FastProxSL1.R")
getwd()
getSrcDirectory()
getSrcDirectory()[1]
setwd("")
getwd
getwd()
getActiveDocumentContent()
(dirname(rstudioapi::getActiveDocumentContext()$path)
)
dirname(rstudioapi::getActiveDocumentContext()$path)
install.packages(rstudioapi)
install.packages("rstudioapi")
library("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
script.dir <- dirname(sys.frame(1)$ofile)
dirname(rstudioapi::getActiveDocumentContext()$path)
a<- dirname(rstudioapi::getActiveDocumentContext()$path)
a
getwd
getwd()
setwd("\home\bartek")
setwd("/home/bartek")
getwd()
dirname(rstudioapi::getActiveDocumentContext()$path)
a<- dirname(rstudioapi::getActiveDocumentContext()$path)
a
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
