# or # of iterations does not exceeds some other threshold
setMethod("stopCond", "GFOMA", function(x){
# isTRUE(abs(x@loss(x@params) - x@params$loss) < 10**(-8) | x@params$iteration > 10**4)
isTRUE(x@params$iteration > 10**4)
})
setGeneric("runAlg", function(x) standardGeneric("runAlg"))
setMethod("runAlg", "GFOMA", function(x){
while(!stopCond(x)){
# save loss at the previous state (before update)
x@params$loss <- x@loss(x@params)
# state update
x@params <- algUpdate(x)
# increment iteration
x@params$iteration <- x@params$iteration + 1
}
return(x@params)
})
# # ISTA
# params - required to have fields:
#   - y: observed values
#   - A: data matrix
#   - x: estimated vector (its starting value)
#   - theta: parameter of the penalty function
#   - stepSize: length of the step (chosen via backtracking)
#   - iteration: number of the current iteration of the algorithm
#   - loss: loss function at the previous state
setClass("ISTA-SLOPE", contains = "GFOMA")
setMethod("algUpdate", "ISTA-SLOPE", function(x){
# here should be the backtracking procedure
# while( x@loss( list("x" = bar, "theta" = x@params$theta*x@params$stepSize) ) > 0 ){
#   x@params$stepSize <- x@params$stepSize * 0.9
# }
# update rule for ISTA
foo <- x@params$x - x@params$stepSize * t(x@params$A) %*% (x@params$A %*% x@params$x - x@params$y)
x@params$x <- FastProxSL1(foo, x@params$stepSize * x@params$theta)
return(x@params)
})
# sanity check
ISTA <- new("ISTA-SLOPE",
params = list("y" = c(6,6),
"A" = diag(c(3,2)),
"x" = c(23,-10),
"theta" = c(1,1),
"stepSize" = 0.01,
"iteration" = 0,
"loss" = Inf),
loss = function(foo) SL1Loss(foo$x, foo$theta))
# # FISTA
# params - required to have fields:
#   - y: observed values
#   - A: data matrix
#   - x: estimated vector (its starting value)
#   - theta: parameter of the penalty function
#   -
#   - stepSize: length of the step (chosen via backtracking)
#   - iteration: number of the current iteration of the algorithm
#   - loss: loss function at the previous state
setClass("FISTA-SLOPE", representation(theta = "numeric"), contains = "GFOMA")
setMethod("algUpdate", "FISTA-SLOPE", function(x){
# update rule for FISTA
x@params$x_old <- x@params$x
foo <- x@params$u - x@params$stepSize * t(x@params$A) %*% (x@params$A %*% x@params$u - x@params$y)
x@params$x <- FastProxSL1(x@params$u, x@params$stepSize * x@params$theta)
x@params$t_old <- x@params$t
x@params$t <- (1+(1+4*(x@params$t)**2)**(1/2))/2
x@params$u <- x@params$x_old + (x@params$t_old - 1)/x@params$t * (x@params$x - x@params$x_old)
return(x@params)
})
# sanity check
FISTA <- new("FISTA-SLOPE",
params = list("y" = c(6,6),
"A" = diag(c(3,2)),
"x" = c(23,-10),
"x_old" = c(23,-10),
"u" = c(23,-10),
"theta" = c(1,1),
"stepSize" = 0.01,
"t" = 1,
"t_old" = 1,
"iteration" = 0,
"loss" = Inf),
loss = function(foo) SL1Loss(foo$x, foo$theta))
runAlg(FISTA)
setMethod("algUpdate", "FISTA-SLOPE", function(x){
# update rule for FISTA
x@params$x_old <- x@params$x
foo <- x@params$u - x@params$stepSize * t(x@params$A) %*% (x@params$A %*% x@params$u - x@params$y)
x@params$x <- FastProxSL1(x@params$u, x@params$stepSize * x@params$theta)
x@params$t_old <- x@params$t
x@params$t <- (1+(1+4*(x@params$t_old)**2)**(1/2))/2
x@params$u <- x@params$x_old + (x@params$t_old - 1)/x@params$t * (x@params$x - x@params$x_old)
return(x@params)
})
algUpdate(FISTA)
a <- 1
(1+(1+4*(a)**2)**(1/2))/2
a <- (1+(1+4*(a)**2)**(1/2))/2
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
print(a <- (1+(1+4*(a)**2)**(1/2))/2)
a <- (1+(1+4*(a)**2)**(1/2))/2
setMethod("algUpdate", "FISTA-SLOPE", function(x){
# update rule for FISTA
x@params$x_old <- x@params$x
foo <- x@params$u - x@params$stepSize * t(x@params$A) %*% (x@params$A %*% x@params$u - x@params$y)
x@params$x <- FastProxSL1(x@params$u, x@params$stepSize * x@params$theta)
x@params$t_old <- x@params$t
x@params$t <- (1+(1+4*(x@params$t_old)**2)**(1/2))/2
x@params$stepSize <- (x@params$t_old - 1)/x@params$t
x@params$u <- x@params$x_old + x@params$stepSize * (x@params$x - x@params$x_old)
return(x@params)
})
runAlg(FISTA)
setMethod("algUpdate", "FISTA-SLOPE", function(x){
# update rule for FISTA
x@params$x_old <- x@params$x
foo <- x@params$u - x@params$stepSize * t(x@params$A) %*% (x@params$A %*% x@params$u - x@params$y)
x@params$x <- FastProxSL1(x@params$u, x@params$stepSize * x@params$theta)
x@params$t_old <- x@params$t
x@params$t <- ((1+(1+4*(x@params$t_old)**(-2))**(1/2))/2)**(-1)
x@params$u <- x@params$x + x@params$t*(1+(x@params$t_old)**(-1)) * (x@params$x - x@params$x_old)
return(x@params)
})
setMethod("algUpdate", "FISTA-SLOPE", function(x){
# update rule for FISTA
x@params$x_old <- x@params$x
foo <- x@params$u - x@params$stepSize * t(x@params$A) %*% (x@params$A %*% x@params$u - x@params$y)
x@params$x <- FastProxSL1(x@params$u, x@params$stepSize * x@params$theta)
x@params$t_old <- x@params$t
x@params$t <- ((1+(1+4*(x@params$t_old)**(-2))**(1/2))/2)**(-1)
x@params$u <- x@params$x + x@params$t*(1+(x@params$t_old)**(-1)) * (x@params$x - x@params$x_old)
return(x@params)
})
FISTA <- new("FISTA-SLOPE",
params = list("y" = c(6,6),
"A" = diag(c(3,2)),
"x" = c(23,-10),
"x_old" = c(23,-10),
"u" = c(23,-10),
"theta" = c(1,1),
"stepSize" = 0.01,
"t" = 1,
"t_old" = 1,
"iteration" = 0,
"loss" = Inf),
loss = function(foo) SL1Loss(foo$x, foo$theta))
runAlg(FISTA)
setMethod("algUpdate", "FISTA-SLOPE", function(x){
# update rule for FISTA
x@params$x_old <- x@params$x
foo <- x@params$u - x@params$stepSize * t(x@params$A) %*% (x@params$A %*% x@params$u - x@params$y)
x@params$x <- FastProxSL1(foo, x@params$stepSize * x@params$theta)
x@params$t_old <- x@params$t
x@params$t <- ((1+(1+4*(x@params$t_old)**(-2))**(1/2))/2)**(-1)
x@params$u <- x@params$x + x@params$t*(1+(x@params$t_old)**(-1)) * (x@params$x - x@params$x_old)
return(x@params)
})
runAlg(FISTA)
setMethod("stopCond", "GFOMA", function(x){
isTRUE(abs(x@loss(x@params) - x@params$loss) < 10**(-8) | x@params$iteration > 10**4)
# isTRUE(x@params$iteration > 10**4)
})
runAlg(FISTA)
runAlg(ISTA)
runAlg(FISTA)
setMethod("algUpdate", "FISTA-SLOPE", function(x){
# update rule for FISTA
x@params$x_old <- x@params$x
foo <- x@params$u - x@params$stepSize * t(x@params$A) %*% (x@params$A %*% x@params$u - x@params$y)
x@params$x <- FastProxSL1(foo, x@params$stepSize * x@params$theta)
x@params$t_old <- x@params$t
x@params$t <- ((1+(1+4*(x@params$t_old)**(-2))**(1/2))/2)**(-1)
x@params$u <- x@params$x + x@params$t*((x@params$t_old)**(-1)-1) * (x@params$x - x@params$x_old)
return(x@params)
})
runAlg(FISTA)
library("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("FastProxSL1.R")
library(methods)
setClass("GFOMA",
representation(params = "list",
loss = "function"),
prototype(params = list(),
loss = function(lambda) 0)
)
setGeneric("algUpdate", function(x) standardGeneric("algUpdate"))
setGeneric("stopCond", function(x) standardGeneric("stopCond"))
setMethod("stopCond", "GFOMA", function(x){
isTRUE(abs(x@loss(x@params) - x@params$loss) < 10**(-8) | x@params$iteration > 10**4)
})
setGeneric("runAlg", function(x) standardGeneric("runAlg"))
setMethod("runAlg", "GFOMA", function(x){
while(!stopCond(x)){
# save loss at the previous state (before update)
x@params$loss <- x@loss(x@params)
# state update
x@params <- algUpdate(x)
# increment iteration
x@params$iteration <- x@params$iteration + 1
}
return(x@params)
})
setClass("ISTA-SLOPE", contains = "GFOMA")
setMethod("algUpdate", "ISTA-SLOPE", function(x){
# here should be the backtracking procedure
# while( x@loss( list("x" = bar, "theta" = x@params$theta*x@params$stepSize) ) > 0 ){
#   x@params$stepSize <- x@params$stepSize * 0.9
# }
# update rule for ISTA
foo <- x@params$x - x@params$stepSize * t(x@params$A) %*% (x@params$A %*% x@params$x - x@params$y)
x@params$x <- FastProxSL1(foo, x@params$stepSize * x@params$theta)
return(x@params)
})
setClass("FISTA-SLOPE", representation(theta = "numeric"), contains = "GFOMA")
setMethod("algUpdate", "FISTA-SLOPE", function(x){
# update rule for FISTA
x@params$x_old <- x@params$x
foo <- x@params$u - x@params$stepSize * t(x@params$A) %*% (x@params$A %*% x@params$u - x@params$y)
x@params$x <- FastProxSL1(foo, x@params$stepSize * x@params$theta)
x@params$t_old <- x@params$t
x@params$t <- ((1+(1+4*(x@params$t_old)**(-2))**(1/2))/2)**(-1)
x@params$u <- x@params$x + x@params$t*((x@params$t_old)**(-1)-1) * (x@params$x - x@params$x_old)
return(x@params)
})
FISTA <- new("FISTA-SLOPE",
params = list("y" = c(6,6),
"A" = diag(c(3,2)),
"x" = c(23,-10),
"x_old" = c(23,-10),
"u" = c(23,-10),
"theta" = c(0,0),
"stepSize" = 0.01,
"t" = 1,
"t_old" = 1,
"iteration" = 0,
"loss" = Inf),
loss = function(foo) SL1Loss(foo$x, foo$theta))
runAlg(FISTA)
FISTA@loss(FISTA@params)
FISTA@params
SL1Loss(FISTA@params$x, FISTA@params$theta)
SL1Loss(FISTA@params$x, c(0,0))
SL1Loss <- function(x, theta, y, A) ( sum( (A %*% x - y)**2 )/2 + as.numeric(MapToDelta(x)$w %*% MapToDelta(theta)$w)))
SL1Loss <- function(x, theta, y, A) ( sum( (A %*% x - y)**2 )/2 + as.numeric(MapToDelta(x)$w %*% MapToDelta(theta)$w) )
library("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("FastProxSL1.R")
library(methods)
setClass("GFOMA",
representation(params = "list",
loss = "function"),
prototype(params = list(),
loss = function(lambda) 0)
)
setGeneric("algUpdate", function(x) standardGeneric("algUpdate"))
SL1Loss <- function(foo) { sum( (foo$A %*% foo$x - foo$y)**2 )/2 + as.numeric(MapToDelta(foo$x)$w %*% MapToDelta(foo$theta)$w) }
source("FastProxSL1.R")
FISTA <- new("FISTA-SLOPE",
params = list("y" = c(6,6),
"A" = diag(c(3,2)),
"x" = c(23,-10),
"x_old" = c(23,-10),
"u" = c(23,-10),
"theta" = c(0,0),
"stepSize" = 0.01,
"t" = 1,
"t_old" = 1,
"iteration" = 0,
"loss" = Inf),
loss = SL1Loss)
FISTA <- new("FISTA-SLOPE",
params = list("y" = c(6,6),
"A" = diag(c(3,2)),
"x" = c(23,-10),
"x_old" = c(23,-10),
"u" = c(23,-10),
"theta" = c(0,0),
"stepSize" = 0.01,
"t" = 1,
"t_old" = 1,
"iteration" = 0,
"loss" = Inf),
loss = SL1Loss)
runAlg(FISTA)
rm(list=ls())
library("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("FastProxSL1.R")
library(methods)
setClass("GFOMA",
representation(params = "list",
loss = "function"),
prototype(params = list(),
loss = function(lambda) 0)
)
setGeneric("algUpdate", function(x) standardGeneric("algUpdate"))
setGeneric("stopCond", function(x) standardGeneric("stopCond"))
setMethod("stopCond", "GFOMA", function(x){
isTRUE(abs(x@loss(x@params) - x@params$loss) < 10**(-8) | x@params$iteration > 10**4)
})
setGeneric("runAlg", function(x) standardGeneric("runAlg"))
setMethod("runAlg", "GFOMA", function(x){
while(!stopCond(x)){
# save loss at the previous state (before update)
x@params$loss <- x@loss(x@params)
# state update
x@params <- algUpdate(x)
# increment iteration
x@params$iteration <- x@params$iteration + 1
}
return(x@params)
})
setClass("ISTA-SLOPE", contains = "GFOMA")
setMethod("algUpdate", "ISTA-SLOPE", function(x){
# here should be the backtracking procedure
# while( x@loss( list("x" = bar, "theta" = x@params$theta*x@params$stepSize) ) > 0 ){
#   x@params$stepSize <- x@params$stepSize * 0.9
# }
# update rule for ISTA
foo <- x@params$x - x@params$stepSize * t(x@params$A) %*% (x@params$A %*% x@params$x - x@params$y)
x@params$x <- FastProxSL1(foo, x@params$stepSize * x@params$theta)
return(x@params)
})
ISTA <- new("ISTA-SLOPE",
params = list("y" = c(6,6),
"A" = diag(c(3,2)),
"x" = c(23,-10),
"theta" = c(1,1),
"stepSize" = 0.01,
"iteration" = 0,
"loss" = Inf),
loss = function(foo) SL1Loss(foo$x, foo$theta, foo$y, foo$A))
runAlg(ISTA)
ISTA <- new("ISTA-SLOPE",
params = list("y" = c(6,6),
"A" = diag(c(3,2)),
"x" = c(23,-10),
"theta" = c(1,1),
"stepSize" = 0.01,
"iteration" = 0,
"loss" = Inf),
loss = SL1Loss)
runAlg(ISTA)
setClass("FISTA-SLOPE", representation(theta = "numeric"), contains = "GFOMA")
setMethod("algUpdate", "FISTA-SLOPE", function(x){
# update rule for FISTA
x@params$x_old <- x@params$x
foo <- x@params$u - x@params$stepSize * t(x@params$A) %*% (x@params$A %*% x@params$u - x@params$y)
x@params$x <- FastProxSL1(foo, x@params$stepSize * x@params$theta)
x@params$t_old <- x@params$t
x@params$t <- ((1+(1+4*(x@params$t_old)**(-2))**(1/2))/2)**(-1)
x@params$u <- x@params$x + x@params$t*((x@params$t_old)**(-1)-1) * (x@params$x - x@params$x_old)
return(x@params)
})
FISTA <- new("FISTA-SLOPE",
params = list("y" = c(6,6),
"A" = diag(c(3,2)),
"x" = c(23,-10),
"x_old" = c(23,-10),
"u" = c(23,-10),
"theta" = c(0,0),
"stepSize" = 0.01,
"t" = 1,
"t_old" = 1,
"iteration" = 0,
"loss" = Inf),
loss = SL1Loss)
runAlg(FISTA)
runAlg(ISTA)
runAlg(FISTA)
FISTA <- new("FISTA-SLOPE",
params = list("y" = c(6,6),
"A" = diag(c(3,2)),
"x" = c(23,-10),
"x_old" = c(23,-10),
"u" = c(23,-10),
"theta" = c(1,1),
"stepSize" = 0.01,
"t" = 1,
"t_old" = 1,
"iteration" = 0,
"loss" = Inf),
loss = SL1Loss)
runAlg(FISTA)
rm(ls=list())
rm(list=ls())
library("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("FastProxSL1.R")
library(methods)
setClass("GFOMA",
representation(params = "list",
loss = "function"),
prototype(params = list(),
loss = function(lambda) 0)
)
setGeneric("algUpdate", function(x) standardGeneric("algUpdate"))
setGeneric("stopCond", function(x) standardGeneric("stopCond"))
setMethod("stopCond", "GFOMA", function(x){
isTRUE(abs(x@loss(x@params) - x@params$loss) < 10**(-9) | x@params$iteration > 10**4)
})
setGeneric("runAlg", function(x) standardGeneric("runAlg"))
setMethod("runAlg", "GFOMA", function(x){
while(!stopCond(x)){
# save loss at the previous state (before update)
x@params$loss <- x@loss(x@params)
# state update
x@params <- algUpdate(x)
# increment iteration
x@params$iteration <- x@params$iteration + 1
}
return(x@params)
})
setClass("ISTA-SLOPE", contains = "GFOMA")
setMethod("algUpdate", "ISTA-SLOPE", function(x){
# here should be the backtracking procedure
# while( x@loss( list("x" = bar, "theta" = x@params$theta*x@params$stepSize) ) > 0 ){
#   x@params$stepSize <- x@params$stepSize * 0.9
# }
# update rule for ISTA
foo <- x@params$x - x@params$stepSize * t(x@params$A) %*% (x@params$A %*% x@params$x - x@params$y)
x@params$x <- FastProxSL1(foo, x@params$stepSize * x@params$theta)
return(x@params)
})
ISTA <- new("ISTA-SLOPE",
params = list("y" = c(6,6),
"A" = diag(c(3,2)),
"x" = c(23,-10),
"theta" = c(1,1),
"stepSize" = 0.01,
"iteration" = 0,
"loss" = Inf),
loss = SL1Loss)
setClass("FISTA-SLOPE", representation(theta = "numeric"), contains = "GFOMA")
setMethod("algUpdate", "FISTA-SLOPE", function(x){
# update rule for FISTA
x@params$x_old <- x@params$x
foo <- x@params$u - x@params$stepSize * t(x@params$A) %*% (x@params$A %*% x@params$u - x@params$y)
x@params$x <- FastProxSL1(foo, x@params$stepSize * x@params$theta)
x@params$t_old <- x@params$t
x@params$t <- ((1+(1+4*(x@params$t_old)**(-2))**(1/2))/2)**(-1)
x@params$u <- x@params$x + x@params$t*((x@params$t_old)**(-1)-1) * (x@params$x - x@params$x_old)
return(x@params)
})
FISTA <- new("FISTA-SLOPE",
params = list("y" = c(6,6),
"A" = diag(c(3,2)),
"x" = c(23,-10),
"x_old" = c(23,-10),
"u" = c(23,-10),
"theta" = c(1,1),
"stepSize" = 0.01,
"t" = 1,
"t_old" = 1,
"iteration" = 0,
"loss" = Inf),
loss = SL1Loss)
runAlg(FISTA)
runAlg(ISTA)
print(ISTA_res <- runAlg(ISTA))
print(FISTA_res <- runAlg(FISTA))
