MapToDelta <- function( v ){
a<-5
b<-"c"
output <- list(a,b)
return(output)
}
[x,y] <- MapToDelta( 1 )
list[x,y] <- MapToDelta( 1 )
x
library(gsubfn)
MapToDelta <- function( v ){
a<-5
b<-"c"
output <- list(a,b)
return(output)
}
list[x,y] <- MapToDelta( 1 )
x <- MapToDelta( 1 )
x
x[1]
x[2]
MapToDelta <- function( v ){
a<-5
b<-"c"
output <- list("v" = a, "sgn" = b)
return(output)
}
x <- MapToDelta( 1 )
x$v
x$sgn
v <- c(1,2,3)
v
v > 0
z < - (v>0)*1
z <- (v>0)*1
z
z <- (v<0)*1
z
z <- [(v<0)-1/2]*1
z <- ((v<0)-1/2)*2
z
z <- ((v>0)-1/2)*2
z
v <- c(-1,2,1)
z <- ((v>0)-1/2)*2
z
MapToDelta <- function( v ){
sgn <- ((v>0) - 1/2)*2
w <- sgn*v
a <- 5
output <- list("sgn" = sgn, "P" = a, "w" = w)
return(output)
}
v <- c(1,2,3)
v <- c(1,2,3)
print(MapToDelta(v))
v <- c(1,-2,3)
print(MapToDelta(v))
v
sort(v)
sort(v, decreasing = TRUE)
sort(v, decreasing = TRUE, index.return = TRUE)
list[w,P] <- sort(v, decreasing = TRUE, index.return = TRUE)
[w,P] <- sort(v, decreasing = TRUE, index.return = TRUE)
(w,P) <- sort(v, decreasing = TRUE, index.return = TRUE)
out <- sort(v, decreasing = TRUE, index.return = TRUE)
out$x
out$ix
MapToDelta <- function( v ){
sgn <- ((v>0) - 1/2)*2
w <- sgn*v
foo <- sort(w, descending = TRUE, index.return = TRUE)
output <- list("sgn" = sgn, "P" = foo$ix, "w" = foo$x)
return(output)
}
v <- c(1,-2,3)
print(MapToDelta(v))
MapToDelta <- function( v ){
sgn <- ((v>0) - 1/2)*2
w <- sgn*v
foo <- sort(w, decreasing = TRUE, index.return = TRUE)
output <- list("sgn" = sgn, "P" = foo$ix, "w" = foo$x)
return(output)
}
v <- c(1,-2,3)
print(MapToDelta(v))
v <- c(1,-2,3,0, -5)
print(MapToDelta(v))
MapToDelta <- function( v ){
sgn <- ((v>0) - 1/2)*2
foo <- sgn*v
bar <- sort(foo, decreasing = TRUE, index.return = TRUE)
output <- list("sgn" = sgn, "P" = bar$ix, "w" = bar$x)
return(output)
}
v <- c(1,-2,3,0, -5)
print(MapToDelta(v))
v <- c(1,-2,3,0, -5)
print(MapToDelta(v)$w)
print(MapToDelta(v)$P)
MapToDelta <- function( v ){
sgn <- ((v>0) - 1/2)*2
foo <- sgn*v
bar <- sort(foo, decreasing = TRUE, index.return = TRUE)
output <- list("sgn" = sgn, "P" = bar$ix, "w" = bar$x)
return(output)
}
v <- c(1,-2,3,0, -5)
print(MapToDelta(v)$w)
print(MapToDelta(v)$P)
v[P]
print(v[foo$P])
v <- c(1,-2,3,0, -5)
foo <- MapToDelta(v)
print(v[foo$P])
print((v*foo$sgn)[foo$P])
print((v*foo$sgn)[foo$P] == foo$w)
foo <- c(1,-2,3,0, -5)
bar <- MapToDelta(foo)
print(all.equal((foo*bar$sgn)[bar$P], bar$w))
foo <- rnorm(20)
bar <- MapToDelta(foo)
print(all.equal((foo*bar$sgn)[bar$P], bar$w))
foo
bar$w
MapToDelta <- function( v ){
sgn <- ((v>0) - 1/2)*2
foo <- sgn*v
bar <- sort(foo, decreasing = TRUE, index.return = TRUE)
return( list("sgn" = sgn, "P" = bar$ix, "w" = bar$x) )
}
foo <- rnorm(20)
bar <- MapToDelta(foo)
print(all.equal((foo*bar$sgn)[bar$P], bar$w))
MapToDelta <- function( v ){
sgn <- ((v>0) - 1/2)*2
foo <- sgn*v
bar <- sort(foo, decreasing = TRUE, index.return = TRUE)
return( list("sgn" = sgn, "P" = bar$ix, "w" = bar$x) )
}
foo <- rnorm(20)
bar <- MapToDelta(foo)
print(all.equal((foo*bar$sgn)[bar$P], bar$w))
P <- bar$P
P
which(P = c(1:length(P)))
which(P == c(1:length(P)))
which(P == 1
)
which(P == 1)
which(P == 2)
which([P == 2])
[which(P == c(1,2))]
a <- c(1:length(P))
a
which(P==a)
which([P == a])
which(P == a)
apply(a, function(x) which(x==P))
apply(a, function(x) fun(which(x==P)))
apply(a, function(x) fun(which(x==P)))
apply(a, FUN = function(x) fun(which(x==P)))
apply(a, FUN = function(x) {fun(which(x==P))})
lapply(a, FUN = function(x) fun(which(x==P)) )
lapply(a, FUN = function(x) (which(x==P)) )
v <- lapply(a, FUN = function(x) (which(x==P)) )
foo
bar$w
bar$w[v]
v
v <- apply(a, FUN = function(x) (which(x==P)) )
v <- lapply(a, FUN = function(x) (which(x==P)) )
list(v)
vector(v)
as.numeric(v)
v <- as.numeric( lapply(a, FUN = function(x) (which(x==P)) ) )
v
bar$w[v]
foo
RetrV <- function( w, sgn, P ){
# retrieves the inverse permutation to P, i.e.
# finds [ j: P[j]=i ]_i
foo <- as.numeric(
lapply(c(1:length(w)), function(x) (which(P == x)))
)
return( w[foo]*sgn )
}
foo <- rnorm(20)
bar <- MapToDelta(foo)
print(all.equal((foo*bar$sgn)[bar$P], bar$w))
print(all.equal((foo*bar$sgn)[bar$P], bar$w))
print( RetrV(bar) == foo )
print( RetrV(bar$w, bar$sgn, bar$P) == foo )
foo <- rnorm(20)
bar <- MapToDelta(foo)
RetrV <- function( w, sgn, P ){
# retrieves the inverse permutation to P, i.e.
# finds [ j: P[j]=i ]_i
foo <- as.numeric(
lapply(c(1:length(w)), function(x) (which(P == x)))
)
return( w[foo]*sgn )
}
foo <- rnorm(20)
bar <- MapToDelta(foo)
print( all.equal((foo*bar$sgn)[bar$P], bar$w) )
print( all.equal(RetrV(bar$w, bar$sgn, bar$P), foo) )
print([foo, bar$w])
print(foo, bar$w)
foo
bar$w
print( c(foo, bar$w) )
print( df(foo, bar$w) )
print( data.frame("v" = foo, "w" = bar$w) )
print( all.equal((foo*bar$sgn)[bar$P], bar$w) )
print( all.equal(RetrV(bar$w, bar$sgn, bar$P), foo) )
MapToDelta <- function( v ){
sgn <- ((v>0) - 1/2)*2
foo <- sgn*v
bar <- sort(foo, decreasing = TRUE, index.return = TRUE)
return( list("w" = bar$x, "sgn" = sgn, "P" = bar$ix) )
}
RetrV <- function( w, sgn, P ){
# retrieves the inverse permutation to P, i.e.
# finds [ j: P[j]=i ]_i
foo <- as.numeric(
lapply(c(1:length(w)), function(x) (which(P == x)))
)
return( w[foo]*sgn )
}
foo <- rnorm(20)
bar <- MapToDelta(foo)
print( data.frame("v" = foo, "w" = bar$w) )
foo <- rnorm(2000)
bar <- MapToDelta(foo)
print( data.frame("v" = foo, "w" = bar$w) )
print( all.equal((foo*bar$sgn)[bar$P], bar$w) )
print( all.equal(RetrV(bar$w, bar$sgn, bar$P), foo) )
foo <- rnorm(10)
bar <- MapToDelta(foo)
print( data.frame("v" = foo, "w" = bar$w) )
a <- null
a <- c()
b <- c()
c <- c()
list[a,b,c] <- bar
type(bar)
typeof(bar)
foo
foo == MapToDelta( foo )$w
foo != MapToDelta( foo )$w
all.equal(foo, MapToDelta(foo)$w)
all.equal(foo, MapToDelta(foo)$w)
if(all.equal(foo, MapToDelta(foo)$w))
)
if(all.equal(foo, MapToDelta(foo)$w)) print("ok")
if(all.equal(foo, MapToDelta(foo)$w)) {print("ok")}
all.equal(foo, MapToDelta(foo)$w)
foo
MapToDelta( foo )$w
all.equal( foo, MapToDelta(foo)$w )
is.true(all.equal( foo, MapToDelta(foo)$w ))
isTRUE(all.equal( foo, MapToDelta(foo)$w ))
foo <- rnorm(10)
bar <- MapToDelta(foo)
print( data.frame("v" = foo, "w" = bar$w) )
print( isTRUE( all.equal((foo*bar$sgn)[bar$P], bar$w) ) )
print( isTRUE( all.equal(RetrV(bar$w, bar$sgn, bar$P), foo) ) )
isFALSE( all.equal(RetrV(bar$w, bar$sgn, bar$P), foo) )
print( !isTRUE( all.equal((foo*bar$sgn)[bar$P], bar$w) ) )
FastProxSL1 <- function( y, theta){
if( !isTRUE(all.equal(theta, MapToDelta(theta)$w )) ) warning("given theta is not in Delta_p")
foo <- MapToDelta( y )
return(foo)
}
FastProxSL1(foo, c(0,1,2))
foo <- rnorm(10)
bar <- MapToDelta(foo)
print( data.frame("v" = foo, "w" = bar$w) )
print( isTRUE( all.equal((foo*bar$sgn)[bar$P], bar$w) ) )
print( isTRUE( all.equal(RetrV(bar$w, bar$sgn, bar$P), foo) ) )
a
a <- c(-1,2,3)
c[c>0]
a[a>0]
DeltaCheck <- function( v ){
return( isTRUE(all.equal(v, MapToDelta(v)$v )) )
}
foo
DeltaCheck(foo)
a
DeltaCheck(a)
a <- c(3,2,1)
DeltaCheck(a)
DeltaCheck <- function( v ){
return( isTRUE(all.equal(v, MapToDelta(v)$w )) )
}
DeltaCheck(a)
DeltaCheck(foo)
a
a <- c(3,2,0,-1)
DeltaCheck(a)
a <- c(3,2,0)
DeltaCheck(a)
min(a) >= 0
a[1:]
a[1,]
a[1]
a[1,2]
tail(a)
a
tail(a,1)
tail(a,2)
tail(a,2)
head(a,2)
min(head(a,2)-tail(a,2))
a[-1]
a[,-1]
a[+1]
a[+1]
a[+2]
a[1:2]
a[-1]
a[1:]
tail(a,length(a)-1)
a[-1]
a[1]
aa
a
a[,-1]
head(a,1)
a[-2]
a[-1]
a[-length(a)]
a[-length(a)]-a[-1]
diff(a)
a
a <- c(5,3,2,0)
diff(a)
max(diff(a))
DeltaCheck <- function( v ){
# return( isTRUE(all.equal(v, MapToDelta(v)$w )) )
return( max(diff(v)) <= 0 && min(v) >= 0  )
}
DeltaCheck(foo)
DeltaCheck(a)
